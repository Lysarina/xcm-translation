   Compiling rs-util v0.1.0 (/home/ehhjmou/xcm-translation/common/rs-util)
warning[E0133]: call to unsafe function `pthread_mutex_init` is unsafe and requires unsafe block
    --> src/util.rs:1187:14
     |
1187 |     let rc = pthread_mutex_init(m, std::ptr::null());
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1186:1
     |
1186 | pub unsafe extern "C" fn ut_mutex_init(m: *mut pthread_mutex_t) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1189:9
     |
1189 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `pthread_mutex_lock` is unsafe and requires unsafe block
    --> src/util.rs:1194:18
     |
1194 |     let mut rc = pthread_mutex_lock(m);
     |                  ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1193:1
     |
1193 | pub unsafe extern "C" fn ut_mutex_lock(mut m: *mut pthread_mutex_t) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1196:9
     |
1196 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `pthread_mutex_unlock` is unsafe and requires unsafe block
    --> src/util.rs:1201:18
     |
1201 |     let mut rc = pthread_mutex_unlock(m);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1200:1
     |
1200 | pub unsafe extern "C" fn ut_mutex_unlock(mut m: *mut pthread_mutex_t) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1203:9
     |
1203 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `syscall` is unsafe and requires unsafe block
    --> src/util.rs:1208:12
     |
1208 |     return syscall(186 as libc::c_int as libc::c_long) as pid_t;
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1207:1
     |
1207 | pub unsafe extern "C" fn ut_gettid() -> pid_t {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `malloc` is unsafe and requires unsafe block
    --> src/util.rs:1212:38
     |
1212 |     let mut ptr: *mut libc::c_void = malloc(size);
     |                                      ^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1211:1
     |
1211 | pub unsafe extern "C" fn ut_malloc(mut size: size_t) -> *mut libc::c_void {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ut_mem_exhausted` is unsafe and requires unsafe block
    --> src/util.rs:1214:9
     |
1214 |         ut_mem_exhausted();
     |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `realloc` is unsafe and requires unsafe block
    --> src/util.rs:1223:11
     |
1223 |     ptr = realloc(ptr, size);
     |           ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1219:1
     |
1219 | / pub unsafe extern "C" fn ut_realloc(
1220 | |     mut ptr: *mut libc::c_void,
1221 | |     mut size: size_t,
1222 | | ) -> *mut libc::c_void {
     | |______________________^

warning[E0133]: call to unsafe function `ut_mem_exhausted` is unsafe and requires unsafe block
    --> src/util.rs:1225:9
     |
1225 |         ut_mem_exhausted();
     |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_malloc` is unsafe and requires unsafe block
    --> src/util.rs:1231:38
     |
1231 |     let mut ptr: *mut libc::c_void = ut_malloc(size);
     |                                      ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1230:1
     |
1230 | pub unsafe extern "C" fn ut_calloc(mut size: size_t) -> *mut libc::c_void {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `memset` is unsafe and requires unsafe block
    --> src/util.rs:1232:5
     |
1232 |     memset(ptr, 0 as libc::c_int, size);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strdup` is unsafe and requires unsafe block
    --> src/util.rs:1237:39
     |
1237 |     let mut copy: *mut libc::c_char = strdup(str);
     |                                       ^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1236:1
     |
1236 | pub unsafe extern "C" fn ut_strdup(mut str: *const libc::c_char) -> *mut libc::c_char {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ut_mem_exhausted` is unsafe and requires unsafe block
    --> src/util.rs:1239:9
     |
1239 |         ut_mem_exhausted();
     |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strndup` is unsafe and requires unsafe block
    --> src/util.rs:1248:39
     |
1248 |     let mut copy: *mut libc::c_char = strndup(str, n);
     |                                       ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1244:1
     |
1244 | / pub unsafe extern "C" fn ut_strndup(
1245 | |     mut str: *const libc::c_char,
1246 | |     mut n: size_t,
1247 | | ) -> *mut libc::c_char {
     | |______________________^

warning[E0133]: call to unsafe function `ut_mem_exhausted` is unsafe and requires unsafe block
    --> src/util.rs:1250:9
     |
1250 |         ut_mem_exhausted();
     |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_malloc` is unsafe and requires unsafe block
    --> src/util.rs:1259:39
     |
1259 |     let mut copy: *mut libc::c_void = ut_malloc(size);
     |                                       ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1255:1
     |
1255 | / pub unsafe extern "C" fn ut_memdup(
1256 | |     mut ptr: *const libc::c_void,
1257 | |     mut size: size_t,
1258 | | ) -> *mut libc::c_void {
     | |______________________^

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
    --> src/util.rs:1260:5
     |
1260 |     memcpy(copy, ptr, size);
     |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `free` is unsafe and requires unsafe block
    --> src/util.rs:1265:5
     |
1265 |     free(ptr);
     |     ^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1264:1
     |
1264 | pub unsafe extern "C" fn ut_free(mut ptr: *mut libc::c_void) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ut_fatal` is unsafe and requires unsafe block
    --> src/util.rs:1269:5
     |
1269 |     ut_fatal();
     |     ^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1268:1
     |
1268 | pub unsafe extern "C" fn ut_mem_exhausted() -> ! {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1273:5
     |
1273 |     abort();
     |     ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1272:1
     |
1272 | pub unsafe extern "C" fn ut_fatal() -> ! {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1277:35
     |
1277 |     let mut _errno: libc::c_int = *__errno_location();
     |                                   ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1276:1
     |
1276 | pub unsafe extern "C" fn ut_close(mut fd: libc::c_int) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1277:36
     |
1277 |     let mut _errno: libc::c_int = *__errno_location();
     |                                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `close` is unsafe and requires unsafe block
    --> src/util.rs:1278:5
     |
1278 |     close(fd);
     |     ^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1279:5
     |
1279 |     *__errno_location() = _errno;
     |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1279:6
     |
1279 |     *__errno_location() = _errno;
     |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_close` is unsafe and requires unsafe block
    --> src/util.rs:1284:9
     |
1284 |         ut_close(fd);
     |         ^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1282:1
     |
1282 | pub unsafe extern "C" fn ut_close_if_valid(mut fd: libc::c_int) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1289:12
     |
1289 |     return (*tv).tv_sec as libc::c_double + (*tv).tv_usec as libc::c_double / 1e6f64;
     |            ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1288:1
     |
1288 | pub unsafe extern "C" fn ut_timeval_to_f(mut tv: *const timeval) -> libc::c_double {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1289:45
     |
1289 |     return (*tv).tv_sec as libc::c_double + (*tv).tv_usec as libc::c_double / 1e6f64;
     |                                             ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1293:12
     |
1293 |     return (*ts).tv_sec as libc::c_double + (*ts).tv_nsec as libc::c_double / 1e9f64;
     |            ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1292:1
     |
1292 | pub unsafe extern "C" fn ut_timespec_to_f(mut ts: *const timespec) -> libc::c_double {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1293:45
     |
1293 |     return (*ts).tv_sec as libc::c_double + (*ts).tv_nsec as libc::c_double / 1e9f64;
     |                                             ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1297:5
     |
1297 |     (*ts).tv_sec = t as __time_t;
     |     ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1296:1
     |
1296 | pub unsafe extern "C" fn ut_f_to_timespec(mut t: libc::c_double, mut ts: *mut timespec) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1298:5
     |
1298 |     (*ts).tv_nsec = ((t - (*ts).tv_sec as libc::c_double) * 1e9f64) as __syscall_slong_t;
     |     ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1298:27
     |
1298 |     (*ts).tv_nsec = ((t - (*ts).tv_sec as libc::c_double) * 1e9f64) as __syscall_slong_t;
     |                           ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `clock_gettime` is unsafe and requires unsafe block
    --> src/util.rs:1303:5
     |
1303 |     clock_gettime(1 as libc::c_int, &mut now);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1301:1
     |
1301 | pub unsafe extern "C" fn ut_ftime() -> libc::c_double {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ut_timespec_to_f` is unsafe and requires unsafe block
    --> src/util.rs:1304:12
     |
1304 |     return ut_timespec_to_f(&mut now);
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `send` is unsafe and requires unsafe block
    --> src/util.rs:1315:42
     |
1315 |           let mut bytes_written: ssize_t = send(
     |  __________________________________________^
1316 | |             fd,
1317 | |             buf.offset(offset as isize),
1318 | |             count.wrapping_sub(offset as size_t),
1319 | |             flags,
1320 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1307:1
     |
1307 | / pub unsafe extern "C" fn ut_send_all(
1308 | |     mut fd: libc::c_int,
1309 | |     mut buf: *mut libc::c_void,
1310 | |     mut count: size_t,
1311 | |     mut flags: libc::c_int,
1312 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1317:13
     |
1317 |             buf.offset(offset as isize),
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/util.rs:1338:27
     |
1338 |     let mut len: size_t = strlen(buf);
     |                           ^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1332:1
     |
1332 | / pub unsafe extern "C" fn ut_vaprintf(
1333 | |     mut buf: *mut libc::c_char,
1334 | |     mut capacity: size_t,
1335 | |     mut format: *const libc::c_char,
1336 | |     mut ap: ::core::ffi::VaList,
1337 | | ) {
     | |_^

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1341:9
     |
1341 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `vsnprintf` is unsafe and requires unsafe block
    --> src/util.rs:1347:31
     |
1347 |       let mut rc: libc::c_int = vsnprintf(
     |  _______________________________^
1348 | |         buf.offset(len as isize),
1349 | |         left,
1350 | |         format,
1351 | |         ap.as_va_list(),
1352 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1348:9
     |
1348 |         buf.offset(len as isize),
     |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/util.rs:1354:9
     |
1354 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_vaprintf` is unsafe and requires unsafe block
    --> src/util.rs:1366:5
     |
1366 |     ut_vaprintf(buf, capacity, format, ap.as_va_list());
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1358:1
     |
1358 | / pub unsafe extern "C" fn ut_aprintf(
1359 | |     mut buf: *mut libc::c_char,
1360 | |     mut capacity: size_t,
1361 | |     mut format: *const libc::c_char,
1362 | |     mut args: ...
1363 | | ) {
     | |_^

warning[E0133]: call to unsafe function `vasprintf` is unsafe and requires unsafe block
    --> src/util.rs:1374:31
     |
1374 |     let mut rc: libc::c_int = vasprintf(&mut str, fmt, ap.as_va_list());
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1369:1
     |
1369 | / pub unsafe extern "C" fn ut_vasprintf(
1370 | |     mut fmt: *const libc::c_char,
1371 | |     mut ap: ::core::ffi::VaList,
1372 | | ) -> *mut libc::c_char {
     | |______________________^

warning[E0133]: call to unsafe function `ut_fatal` is unsafe and requires unsafe block
    --> src/util.rs:1376:9
     |
1376 |         ut_fatal();
     |         ^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_vasprintf` is unsafe and requires unsafe block
    --> src/util.rs:1387:38
     |
1387 |     let mut str: *mut libc::c_char = ut_vasprintf(fmt, ap.as_va_list());
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1381:1
     |
1381 | / pub unsafe extern "C" fn ut_asprintf(
1382 | |     mut fmt: *const libc::c_char,
1383 | |     mut args: ...
1384 | | ) -> *mut libc::c_char {
     | |______________________^

warning[E0133]: call to unsafe function `fcntl` is unsafe and requires unsafe block
    --> src/util.rs:1395:34
     |
1395 |     let mut flags: libc::c_int = fcntl(fd, 3 as libc::c_int, 0 as libc::c_int);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1391:1
     |
1391 | / pub unsafe extern "C" fn ut_set_blocking(
1392 | |     mut fd: libc::c_int,
1393 | |     mut should_block: bool,
1394 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `fcntl` is unsafe and requires unsafe block
    --> src/util.rs:1401:12
     |
1401 |     return fcntl(fd, 4 as libc::c_int, flags);
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `fcntl` is unsafe and requires unsafe block
    --> src/util.rs:1405:34
     |
1405 |     let mut flags: libc::c_int = fcntl(fd, 3 as libc::c_int, 0 as libc::c_int);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1404:1
     |
1404 | pub unsafe extern "C" fn ut_is_blocking(mut fd: libc::c_int) -> bool {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `getsockopt` is unsafe and requires unsafe block
    --> src/util.rs:1416:8
     |
1416 |       if getsockopt(
     |  ________^
1417 | |         fd,
1418 | |         1 as libc::c_int,
1419 | |         4 as libc::c_int,
1420 | |         &mut socket_errno as *mut libc::c_int as *mut libc::c_void,
1421 | |         &mut len,
1422 | |     ) < 0 as libc::c_int
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1412:1
     |
1412 | unsafe extern "C" fn socket_error(mut fd: libc::c_int) -> libc::c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1427:9
     |
1427 |         *__errno_location() = socket_errno;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1427:10
     |
1427 |         *__errno_location() = socket_errno;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1442:35
     |
1442 |     let mut _errno: libc::c_int = *__errno_location();
     |                                   ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1433:1
     |
1433 | pub unsafe extern "C" fn ut_established(mut fd: libc::c_int) -> libc::c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1442:36
     |
1442 |     let mut _errno: libc::c_int = *__errno_location();
     |                                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `poll` is unsafe and requires unsafe block
    --> src/util.rs:1443:5
     |
1443 |     poll(&mut pfd, 1 as libc::c_int as nfds_t, 0 as libc::c_int);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1444:5
     |
1444 |     *__errno_location() = _errno;
     |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1444:6
     |
1444 |     *__errno_location() = _errno;
     |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_error` is unsafe and requires unsafe block
    --> src/util.rs:1448:16
     |
1448 |         return socket_error(fd)
     |                ^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1450:9
     |
1450 |         *__errno_location() = 115 as libc::c_int; 
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1450:10
     |
1450 |         *__errno_location() = 115 as libc::c_int; 
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1464:36
     |
1464 |     let mut _oerrno: libc::c_int = *__errno_location();
     |                                    ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1455:1
     |
1455 | pub unsafe extern "C" fn ut_is_readable(mut fd: libc::c_int) -> bool {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1464:37
     |
1464 |     let mut _oerrno: libc::c_int = *__errno_location();
     |                                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `poll` is unsafe and requires unsafe block
    --> src/util.rs:1465:31
     |
1465 |       let mut rc: libc::c_int = poll(
     |  _______________________________^
1466 | |         &mut pfd,
1467 | |         1 as libc::c_int as nfds_t,
1468 | |         0 as libc::c_int,
1469 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1470:5
     |
1470 |     *__errno_location() = _oerrno;
     |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1470:6
     |
1470 |     *__errno_location() = _oerrno;
     |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
    --> src/util.rs:1478:5
     |
1478 | /     snprintf(
1479 | |         self_net_ns.as_mut_ptr(),
1480 | |         ::core::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
1481 | |         b"/proc/%d/ns/net\0" as *const u8 as *const libc::c_char,
1482 | |         ut_gettid(),
1483 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1475:1
     |
1475 | pub unsafe extern "C" fn ut_self_net_ns(mut name: *mut libc::c_char) -> libc::c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ut_gettid` is unsafe and requires unsafe block
    --> src/util.rs:1482:9
     |
1482 |         ut_gettid(),
     |         ^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `stat` is unsafe and requires unsafe block
    --> src/util.rs:1501:8
     |
1501 |     if stat(self_net_ns.as_mut_ptr(), &mut self_ns_st) < 0 as libc::c_int {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `opendir` is unsafe and requires unsafe block
    --> src/util.rs:1504:32
     |
1504 |       let mut ns_dir: *mut DIR = opendir(
     |  ________________________________^
1505 | |         b"/run/netns\0" as *const u8 as *const libc::c_char,
1506 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1508:12
     |
1508 |         if *__errno_location() == 2 as libc::c_int {
     |            ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1508:13
     |
1508 |         if *__errno_location() == 2 as libc::c_int {
     |             ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1509:13
     |
1509 |             *name.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1509:14
     |
1509 |             *name.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1516:5
     |
1516 |     *__errno_location() = 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1516:6
     |
1516 |     *__errno_location() = 0 as libc::c_int;
     |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `readdir` is unsafe and requires unsafe block
    --> src/util.rs:1519:13
     |
1519 |         e = readdir(ns_dir);
     |             ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/util.rs:1524:19
     |
1524 |         let vla = (strlen(b"/run/netns\0" as *const u8 as *const libc::c_char))
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/util.rs:1525:27
     |
1525 |             .wrapping_add(strlen(((*e).d_name).as_mut_ptr()))
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1525:35
     |
1525 |             .wrapping_add(strlen(((*e).d_name).as_mut_ptr()))
     |                                   ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
    --> src/util.rs:1528:9
     |
1528 | /         snprintf(
1529 | |             ns_file.as_mut_ptr(),
1530 | |             (vla * ::core::mem::size_of::<libc::c_char>()) as libc::c_ulong,
1531 | |             b"%s/%s\0" as *const u8 as *const libc::c_char,
1532 | |             b"/run/netns\0" as *const u8 as *const libc::c_char,
1533 | |             ((*e).d_name).as_mut_ptr(),
1534 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1533:14
     |
1533 |             ((*e).d_name).as_mut_ptr(),
     |              ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `stat` is unsafe and requires unsafe block
    --> src/util.rs:1552:12
     |
1552 |         if stat(ns_file.as_mut_ptr(), &mut ns_st) < 0 as libc::c_int {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
    --> src/util.rs:1559:9
     |
1559 |         strcpy(name, ((*e).d_name).as_mut_ptr());
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1559:23
     |
1559 |         strcpy(name, ((*e).d_name).as_mut_ptr());
     |                       ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1566:16
     |
1566 |             if *__errno_location() == 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1566:17
     |
1566 |             if *__errno_location() == 0 as libc::c_int {
     |                 ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1567:17
     |
1567 |                 *name.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1567:18
     |
1567 |                 *name.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `closedir` is unsafe and requires unsafe block
    --> src/util.rs:1573:5
     |
1573 |     closedir(ns_dir);
     |     ^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `libc::accept4` is unsafe and requires unsafe block
    --> src/util.rs:1583:27
     |
1583 |       let rc: libc::c_int = accept4(
     |  ___________________________^
1584 | |         sockfd,
1585 | |         addr as *mut libc::sockaddr,
1586 | |         addrlen,
1587 | |         flags as libc::c_int,
1588 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1577:1
     |
1577 | / pub unsafe extern "C" fn ut_accept(
1578 | |     mut sockfd: libc::c_int,
1579 | |     mut addr: *mut sockaddr,
1580 | |     mut addrlen: *mut socklen_t,
1581 | |     mut flags: libc::c_uint,
1582 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1590:33
     |
1590 |     if rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int {
     |                                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1590:34
     |
1590 |     if rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int {
     |                                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1591:9
     |
1591 |         *__errno_location() = 11 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1591:10
     |
1591 |         *__errno_location() = 11 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `fopen` is unsafe and requires unsafe block
    --> src/util.rs:1603:28
     |
1603 |     let mut f: *mut FILE = fopen(filename, b"r\0" as *const u8 as *const libc::c_char);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1595:1
     |
1595 | / unsafe extern "C" fn load_file(
1596 | |     mut filename: *const libc::c_char,
1597 | |     mut data: *mut *mut libc::c_char,
1598 | |     mut spare_capacity: size_t,
1599 | | ) -> ssize_t {
     | |____________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1605:9
     |
1605 |         *data = 0 as *mut libc::c_char;
     |         ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1608:13
     |
1608 |             *data = ut_realloc(
     |             ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_realloc` is unsafe and requires unsafe block
    --> src/util.rs:1608:21
     |
1608 |               *data = ut_realloc(
     |  _____________________^
1609 | |                 *data as *mut libc::c_void,
1610 | |                 capacity.wrapping_add(spare_capacity),
1611 | |             ) as *mut libc::c_char;
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1609:17
     |
1609 |                 *data as *mut libc::c_void,
     |                 ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `fread` is unsafe and requires unsafe block
    --> src/util.rs:1612:33
     |
1612 |               let mut b: size_t = fread(
     |  _________________________________^
1613 | |                 (*data).offset(len as isize) as *mut libc::c_void,
1614 | |                 1 as libc::c_int as libc::c_ulong,
1615 | |                 256 as libc::c_int as libc::c_ulong,
1616 | |                 f,
1617 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1613:17
     |
1613 |                 (*data).offset(len as isize) as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1613:17
     |
1613 |                 (*data).offset(len as isize) as *mut libc::c_void,
     |                 ^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ferror` is unsafe and requires unsafe block
    --> src/util.rs:1622:16
     |
1622 |             if ferror(f) != 0 {
     |                ^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_free` is unsafe and requires unsafe block
    --> src/util.rs:1632:17
     |
1632 |                 ut_free(*data as *mut libc::c_void);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1632:25
     |
1632 |                 ut_free(*data as *mut libc::c_void);
     |                         ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1633:17
     |
1633 |                 *data = 0 as *mut libc::c_char;
     |                 ^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `fclose` is unsafe and requires unsafe block
    --> src/util.rs:1634:17
     |
1634 |                 fclose(f);
     |                 ^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `fclose` is unsafe and requires unsafe block
    --> src/util.rs:1637:17
     |
1637 |                 fclose(f);
     |                 ^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `load_file` is unsafe and requires unsafe block
    --> src/util.rs:1649:12
     |
1649 |     return load_file(filename, data, 0 as libc::c_int as size_t);
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1645:1
     |
1645 | / pub unsafe extern "C" fn ut_load_file(
1646 | |     mut filename: *const libc::c_char,
1647 | |     mut data: *mut *mut libc::c_char,
1648 | | ) -> ssize_t {
     | |____________^

warning[E0133]: call to unsafe function `load_file` is unsafe and requires unsafe block
    --> src/util.rs:1656:27
     |
1656 |     let mut rc: ssize_t = load_file(filename, data, 1 as libc::c_int as size_t);
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1652:1
     |
1652 | / pub unsafe extern "C" fn ut_load_text_file(
1653 | |     mut filename: *const libc::c_char,
1654 | |     mut data: *mut *mut libc::c_char,
1655 | | ) -> ssize_t {
     | |____________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1658:9
     |
1658 |         *(*data).offset(rc as isize) = '\0' as i32 as libc::c_char;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/util.rs:1658:10
     |
1658 |         *(*data).offset(rc as isize) = '\0' as i32 as libc::c_char;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1658:10
     |
1658 |         *(*data).offset(rc as isize) = '\0' as i32 as libc::c_char;
     |          ^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `fprintf` is unsafe and requires unsafe block
    --> src/util.rs:1668:5
     |
1668 |     fprintf(stderr, b"FATAL: \0" as *const u8 as *const libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/util.rs:1665:1
     |
1665 | pub unsafe extern "C" fn ut_die(mut fmt: *const libc::c_char, mut args: ...) -> ! {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/util.rs:1668:13
     |
1668 |     fprintf(stderr, b"FATAL: \0" as *const u8 as *const libc::c_char);
     |             ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `vfprintf` is unsafe and requires unsafe block
    --> src/util.rs:1669:5
     |
1669 |     vfprintf(stderr, fmt, ap.as_va_list());
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/util.rs:1669:14
     |
1669 |     vfprintf(stderr, fmt, ap.as_va_list());
     |              ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `fprintf` is unsafe and requires unsafe block
    --> src/util.rs:1670:5
     |
1670 | /     fprintf(
1671 | |         stderr,
1672 | |         b": %s.\n\0" as *const u8 as *const libc::c_char,
1673 | |         strerror(*__errno_location()),
1674 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/util.rs:1671:9
     |
1671 |         stderr,
     |         ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
    --> src/util.rs:1673:9
     |
1673 |         strerror(*__errno_location()),
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/util.rs:1673:18
     |
1673 |         strerror(*__errno_location()),
     |                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/util.rs:1673:19
     |
1673 |         strerror(*__errno_location()),
     |                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `exit` is unsafe and requires unsafe block
    --> src/util.rs:1675:5
     |
1675 |     exit(1 as libc::c_int);
     |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning: path statement with no effect
    --> src/util.rs:1660:9
     |
1660 |         rc;
     |         ^^^
     |
     = note: `#[warn(path_statements)]` on by default

For more information about this error, try `rustc --explain E0133`.
warning: `rs-util` (lib) generated 126 warnings (run `cargo fix --lib -p rs-util` to apply 35 suggestions)
    Finished `release` profile [optimized] target(s) in 0.61s
   Compiling rs-attr-path v0.1.0 (/home/ehhjmou/xcm-translation/libxcm/core/rs-attr-path)
error: encountered diff marker
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-attr-path/src/attr_path.rs:12:1
   |
12 | <<<<<<< HEAD:libxcm/core/rs-attrpath/src/attr_path.rs
   | ^^^^^^^ between this marker and `=======` is the code that we're merging into
13 | =======
   | ------- between this marker and `>>>>>>>` is the incoming code
14 |
15 | >>>>>>> translation:libxcm/core/rs-attr-path/src/attr_path.rs
   | ^^^^^^^ this marker concludes the conflict region
   |
   = note: conflict markers indicate that a merge was started but could not be completed due to merge conflicts
           to resolve a conflict, keep only the code you want and then delete the lines containing conflict markers
   = help: if you're having merge conflicts after pulling new code:
           the top section is the code you already had and the bottom section is the remote code
           if you're in the middle of a rebase:
           the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased
   = note: for an explanation on these markers from the `git` documentation:
           visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>

error: could not compile `rs-attr-path` (lib) due to 1 previous error
   Compiling rs-attr-path v0.1.0 (/home/ehhjmou/xcm-translation/libxcm/core/rs-attr-path)
error: encountered diff marker
  --> src/attr_path.rs:12:1
   |
12 | <<<<<<< HEAD:libxcm/core/rs-attrpath/src/attr_path.rs
   | ^^^^^^^ between this marker and `=======` is the code that we're merging into
13 | =======
   | ------- between this marker and `>>>>>>>` is the incoming code
14 |
15 | >>>>>>> translation:libxcm/core/rs-attr-path/src/attr_path.rs
   | ^^^^^^^ this marker concludes the conflict region
   |
   = note: conflict markers indicate that a merge was started but could not be completed due to merge conflicts
           to resolve a conflict, keep only the code you want and then delete the lines containing conflict markers
   = help: if you're having merge conflicts after pulling new code:
           the top section is the code you already had and the bottom section is the remote code
           if you're in the middle of a rebase:
           the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased
   = note: for an explanation on these markers from the `git` documentation:
           visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>

error: could not compile `rs-attr-path` (lib) due to 1 previous error
   Compiling rs-attr-path v0.1.0 (/home/ehhjmou/xcm-translation/libxcm/core/rs-attr-path)
warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:53:16
   |
53 |             if *(value as *mut bool) {
   |                ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:44:1
   |
44 | / pub unsafe extern "C" fn log_attr_str_value(
45 | |     mut type_0: xcm_attr_type,
46 | |     mut value: *const libc::c_void,
47 | |     mut len: size_t,
48 | |     mut buf: *mut libc::c_char,
49 | |     mut capacity: size_t,
50 | | ) {
   | |_^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:54:17
   |
54 |                 strcpy(buf, b"true\0" as *const u8 as *const libc::c_char);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:56:17
   |
56 |                 strcpy(buf, b"false\0" as *const u8 as *const libc::c_char);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:60:13
   |
60 | /             snprintf(
61 | |                 buf,
62 | |                 capacity,
63 | |                 b"%ld\0" as *const u8 as *const libc::c_char,
64 | |                 *(value as *const int64_t),
65 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:64:17
   |
64 |                 *(value as *const int64_t),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:68:13
   |
68 | /             snprintf(
69 | |                 buf,
70 | |                 capacity,
71 | |                 b"%f\0" as *const u8 as *const libc::c_char,
72 | |                 *(value as *const libc::c_double),
73 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:72:17
   |
72 |                 *(value as *const libc::c_double),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:76:13
   |
76 | /             snprintf(
77 | |                 buf,
78 | |                 capacity,
79 | |                 b"\"%s\"\0" as *const u8 as *const libc::c_char,
80 | |                 value as *const libc::c_char,
81 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:82:13
   |
82 | /             *buf
83 | |                 .offset(
84 | |                     capacity.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
85 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:82:14
   |
82 |               *buf
   |  ______________^
83 | |                 .offset(
84 | |                     capacity.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
85 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:89:17
   |
89 | /                 strcpy(
90 | |                     buf,
91 | |                     b"<zero-length binary data>\0" as *const u8 as *const libc::c_char,
92 | |                 );
   | |_________________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:101:25
    |
101 | /                         snprintf(
102 | |                             buf,
103 | |                             capacity,
104 | |                             b"<%zd bytes of data>\0" as *const u8 as *const libc::c_char,
105 | |                             len,
106 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:110:29
    |
110 | ...                   *buf.offset(offset as isize) = ':' as i32 as libc::c_char;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:110:30
    |
110 | ...                   *buf.offset(offset as isize) = ':' as i32 as libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:114:25
    |
114 | /                         snprintf(
115 | |                             buf.offset(offset as isize),
116 | |                             capacity.wrapping_sub(offset),
117 | |                             b"%02x\0" as *const u8 as *const libc::c_char,
118 | |                             *value_bin.offset(i as isize) as libc::c_int,
119 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:115:29
    |
115 | ...                   buf.offset(offset as isize),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:118:29
    |
118 | ...                   *value_bin.offset(i as isize) as libc::c_int,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:118:30
    |
118 | ...                   *value_bin.offset(i as isize) as libc::c_int,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:127:17
    |
127 |                 *buf.offset(offset as isize) = '\0' as i32 as libc::c_char;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:127:18
    |
127 |                 *buf.offset(offset as isize) = '\0' as i32 as libc::c_char;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: path statement with no effect
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:112:29
    |
112 | ...                   offset;
    |                       ^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> /home/ehhjmou/xcm-translation/libxcm/core/rs-log-attr-tree/src/log_attr_tree.rs:124:25
    |
124 |                         i;
    |                         ^^

For more information about this error, try `rustc --explain E0133`.
warning: `rs-log-attr-tree` (lib) generated 22 warnings (run `cargo fix --lib -p rs-log-attr-tree` to apply 1 suggestion)
error: encountered diff marker
  --> /home/ehhjmou/xcm-translation/libxcm/core/rs-attr-path/src/attr_path.rs:12:1
   |
12 | <<<<<<< HEAD:libxcm/core/rs-attrpath/src/attr_path.rs
   | ^^^^^^^ between this marker and `=======` is the code that we're merging into
13 | =======
   | ------- between this marker and `>>>>>>>` is the incoming code
14 |
15 | >>>>>>> translation:libxcm/core/rs-attr-path/src/attr_path.rs
   | ^^^^^^^ this marker concludes the conflict region
   |
   = note: conflict markers indicate that a merge was started but could not be completed due to merge conflicts
           to resolve a conflict, keep only the code you want and then delete the lines containing conflict markers
   = help: if you're having merge conflicts after pulling new code:
           the top section is the code you already had and the bottom section is the remote code
           if you're in the middle of a rebase:
           the top section is the code being rebased onto and the bottom section is the code coming from the current commit being rebased
   = note: for an explanation on these markers from the `git` documentation:
           visit <https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_checking_out_conflicts>

error: could not compile `rs-attr-path` (lib) due to 1 previous error
error: could not find `Cargo.toml` in `/home/ehhjmou/xcm-translation/libxcm/core/rs-attrpath` or any parent directory
warning: the feature `core_intrinsics` is internal to the compiler or standard library
  --> src/xcm.rs:10:24
   |
10 | #![feature(c_variadic, core_intrinsics, extern_types)]
   |                        ^^^^^^^^^^^^^^^
   |
   = note: using it is strongly discouraged
   = note: `#[warn(internal_features)]` on by default

warning: unnecessary parentheses around function argument
   --> src/xcm.rs:375:13
    |
375 |             (if bytestream as libc::c_int != 0 {
    |             ^
...
379 |             }),
    |              ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
375 ~             if bytestream as libc::c_int != 0 {
376 |                 b"bytestream\0" as *const u8 as *const libc::c_char
377 |             } else {
378 |                 b"messaging\0" as *const u8 as *const libc::c_char
379 ~             },
    |

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:274:12
    |
274 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:271:1
    |
271 | unsafe extern "C" fn assure_library_version_logged() {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:275:13
    |
275 | /             __log_event(
276 | |                 log_type_debug,
277 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
278 | |                     as *const u8 as *const libc::c_char,
...   |
289 | |                 xcm_version_api(),
290 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:280:19
    |
280 |                   (*::core::mem::transmute::<
    |  ___________________^
281 | |                     &[u8; 30],
282 | |                     &[libc::c_char; 30],
283 | |                 >(b"assure_library_version_logged\0"))
    | |_____________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_version` is unsafe and requires unsafe block
   --> src/xcm.rs:288:17
    |
288 |                 xcm_version(),
    |                 ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_version_api` is unsafe and requires unsafe block
   --> src/xcm.rs:289:17
    |
289 |                 xcm_version_api(),
    |                 ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:300:5
    |
300 |     (*s).condition = condition;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:299:1
    |
299 | unsafe extern "C" fn await_0(mut s: *mut xcm_socket, mut condition: libc::c_int) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `xcm_tp_socket_update` is unsafe and requires unsafe block
   --> src/xcm.rs:301:5
    |
301 |     xcm_tp_socket_update(s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `await_0` is unsafe and requires unsafe block
   --> src/xcm.rs:307:5
    |
307 |     await_0(conn_s, condition);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:303:1
    |
303 | / unsafe extern "C" fn socket_wait(
304 | |     mut conn_s: *mut xcm_socket,
305 | |     mut condition: libc::c_int,
306 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xpoll_get_fd` is unsafe and requires unsafe block
   --> src/xcm.rs:310:17
    |
310 |             fd: xpoll_get_fd((*conn_s).xpoll),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:310:30
    |
310 |             fd: xpoll_get_fd((*conn_s).xpoll),
    |                              ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `poll` is unsafe and requires unsafe block
   --> src/xcm.rs:316:31
    |
316 |       let mut rc: libc::c_int = poll(
    |  _______________________________^
317 | |         &mut pfd,
318 | |         1 as libc::c_int as nfds_t,
319 | |         -(1 as libc::c_int),
320 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_finish` is unsafe and requires unsafe block
   --> src/xcm.rs:326:16
    |
326 |         f_rc = xcm_tp_socket_finish(s);
    |                ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:323:1
    |
323 | unsafe extern "C" fn socket_finish(mut s: *mut xcm_socket) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:328:17
    |
328 |             && (*__errno_location() == 11 as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:328:18
    |
328 |             && (*__errno_location() == 11 as libc::c_int
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:329:20
    |
329 |                 || *__errno_location() == 115 as libc::c_int))
    |                    ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:329:21
    |
329 |                 || *__errno_location() == 115 as libc::c_int))
    |                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_wait` is unsafe and requires unsafe block
   --> src/xcm.rs:333:12
    |
333 |         if socket_wait(s, 0 as libc::c_int) < 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_map_create` is unsafe and requires unsafe block
   --> src/xcm.rs:346:17
    |
346 |         attrs = xcm_attr_map_create();
    |                 ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:340:1
    |
340 | / pub unsafe extern "C" fn xcm_connect(
341 | |     mut remote_addr: *const libc::c_char,
342 | |     mut flags: libc::c_int,
343 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `xcm_attr_map_add_bool` is unsafe and requires unsafe block
   --> src/xcm.rs:347:9
    |
347 | /         xcm_attr_map_add_bool(
348 | |             attrs,
349 | |             b"xcm.blocking\0" as *const u8 as *const libc::c_char,
350 | |             0 as libc::c_int != 0,
351 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_connect_a` is unsafe and requires unsafe block
   --> src/xcm.rs:353:37
    |
353 |     let mut conn: *mut xcm_socket = xcm_connect_a(remote_addr, attrs);
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_map_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:354:5
    |
354 |     xcm_attr_map_destroy(attrs);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_map_exists` is unsafe and requires unsafe block
   --> src/xcm.rs:363:13
    |
363 |           || !xcm_attr_map_exists(
    |  _____________^
364 | |             attrs,
365 | |             b"xcm.service\0" as *const u8 as *const libc::c_char,
366 | |         )
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:357:1
    |
357 | / unsafe extern "C" fn set_default_attrs(
358 | |     mut s: *mut xcm_socket,
359 | |     mut parent_s: *mut xcm_socket,
360 | |     mut attrs: *const xcm_attr_map,
361 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_tp_socket_is_bytestream` is unsafe and requires unsafe block
   --> src/xcm.rs:370:26
    |
370 |             bytestream = xcm_tp_socket_is_bytestream(parent_s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_set_str` is unsafe and requires unsafe block
   --> src/xcm.rs:372:12
    |
372 |           if xcm_attr_set_str(
    |  ____________^
373 | |             s,
374 | |             b"xcm.service\0" as *const u8 as *const libc::c_char,
375 | |             (if bytestream as libc::c_int != 0 {
...   |
379 | |             }),
380 | |         ) < 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:395:8
    |
395 |     if (*state).rc != 0 as libc::c_int {
    |        ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:387:1
    |
387 | / unsafe extern "C" fn set_attr_cb(
388 | |     mut attr_name: *const libc::c_char,
389 | |     mut attr_type: xcm_attr_type,
390 | |     mut attr_value: *const libc::c_void,
391 | |     mut attr_value_len: size_t,
392 | |     mut user: *mut libc::c_void,
393 | | ) {
    | |_^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:398:5
    |
398 |     (*state)
    |     ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_set` is unsafe and requires unsafe block
   --> src/xcm.rs:399:15
    |
399 |         .rc = xcm_attr_set((*state).s, attr_name, attr_type, attr_value, attr_value_len);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:399:28
    |
399 |         .rc = xcm_attr_set((*state).s, attr_name, attr_type, attr_value, attr_value_len);
    |                            ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_map_foreach` is unsafe and requires unsafe block
   --> src/xcm.rs:412:5
    |
412 | /     xcm_attr_map_foreach(
413 | |         attrs,
414 | |         Some(
415 | |             set_attr_cb
...   |
424 | |         &mut state as *mut set_attr_state as *mut libc::c_void,
425 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:401:1
    |
401 | / unsafe extern "C" fn set_user_attrs(
402 | |     mut s: *mut xcm_socket,
403 | |     mut attrs: *const xcm_attr_map,
404 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `set_default_attrs` is unsafe and requires unsafe block
   --> src/xcm.rs:433:8
    |
433 |     if set_default_attrs(s, parent_s, attrs) < 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:428:1
    |
428 | / unsafe extern "C" fn set_attrs(
429 | |     mut s: *mut xcm_socket,
430 | |     mut parent_s: *mut xcm_socket,
431 | |     mut attrs: *const xcm_attr_map,
432 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `set_user_attrs` is unsafe and requires unsafe block
   --> src/xcm.rs:436:8
    |
436 |     if set_user_attrs(s, attrs) < 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_create` is unsafe and requires unsafe block
   --> src/xcm.rs:446:34
    |
446 |       let mut s: *mut xcm_socket = xcm_tp_socket_create(
    |  __________________________________^
447 | |         proto,
448 | |         type_0,
449 | |         0 as *mut xpoll,
...   |
452 | |         is_blocking,
453 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:441:1
    |
441 | / unsafe extern "C" fn socket_create(
442 | |     mut proto: *const xcm_tp_proto,
443 | |     mut type_0: xcm_socket_type,
444 | |     mut is_blocking: bool,
445 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `xpoll_create` is unsafe and requires unsafe block
   --> src/xcm.rs:454:33
    |
454 |     let mut xpoll: *mut xpoll = xpoll_create(s as *mut libc::c_void);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:456:9
    |
456 |         xcm_tp_socket_destroy(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:459:5
    |
459 |     (*s).xpoll = xpoll;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:464:37
    |
464 |         let mut xpoll: *mut xpoll = (*s).xpoll;
    |                                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:462:1
    |
462 | unsafe extern "C" fn socket_destroy(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `xcm_tp_socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:465:9
    |
465 |         xcm_tp_socket_destroy(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xpoll_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:466:9
    |
466 |         xpoll_destroy(xpoll);
    |         ^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `assure_library_version_logged` is unsafe and requires unsafe block
   --> src/xcm.rs:475:5
    |
475 |     assure_library_version_logged();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:470:1
    |
470 | / pub unsafe extern "C" fn xcm_connect_a(
471 | |     mut remote_addr: *const libc::c_char,
472 | |     mut attrs: *const xcm_attr_map,
473 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `xcm_tp_proto_by_addr` is unsafe and requires unsafe block
   --> src/xcm.rs:476:42
    |
476 |     let mut proto: *const xcm_tp_proto = xcm_tp_proto_by_addr(remote_addr);
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_create` is unsafe and requires unsafe block
   --> src/xcm.rs:480:34
    |
480 |       let mut s: *mut xcm_socket = socket_create(
    |  __________________________________^
481 | |         proto,
482 | |         xcm_socket_type_conn,
483 | |         1 as libc::c_int != 0,
484 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_init` is unsafe and requires unsafe block
   --> src/xcm.rs:486:14
    |
486 |         if !(xcm_tp_socket_init(s, 0 as *mut xcm_socket) < 0 as libc::c_int) {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `set_attrs` is unsafe and requires unsafe block
   --> src/xcm.rs:487:16
    |
487 |             if set_attrs(s, 0 as *mut xcm_socket, attrs) < 0 as libc::c_int {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_connect` is unsafe and requires unsafe block
   --> src/xcm.rs:489:23
    |
489 |             } else if xcm_tp_socket_connect(s, remote_addr) < 0 as libc::c_int {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:492:20
    |
492 |                 if (*s).is_blocking as libc::c_int != 0
    |                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `socket_finish` is unsafe and requires unsafe block
   --> src/xcm.rs:493:24
    |
493 |                     && socket_finish(s) < 0 as libc::c_int
    |                        ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:495:24
    |
495 |                     if log_is_enabled(log_type_debug) {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:496:25
    |
496 | /                         __log_event(
497 | |                             log_type_debug,
498 | |                             b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
499 | |                                 as *const u8 as *const libc::c_char,
...   |
510 | |                             strerror(*__errno_location()),
511 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:501:31
    |
501 |   ...                   (*::core::mem::transmute::<
    |  _________________________^
502 | | ...                       &[u8; 14],
503 | | ...                       &[libc::c_char; 14],
504 | | ...                   >(b"xcm_connect_a\0"))
    | |___________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:509:29
    |
509 | ...                   *__errno_location(),
    |                       ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:509:30
    |
509 | ...                   *__errno_location(),
    |                        ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/xcm.rs:510:29
    |
510 | ...                   strerror(*__errno_location()),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:510:38
    |
510 | ...                   strerror(*__errno_location()),
    |                                ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:510:39
    |
510 | ...                   strerror(*__errno_location()),
    |                                 ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_close` is unsafe and requires unsafe block
   --> src/xcm.rs:521:21
    |
521 |                     xcm_tp_socket_close(s);
    |                     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:525:9
    |
525 |         socket_destroy(s);
    |         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_server_a` is unsafe and requires unsafe block
   --> src/xcm.rs:533:12
    |
533 |     return xcm_server_a(local_addr, 0 as *const xcm_attr_map);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:530:1
    |
530 | / pub unsafe extern "C" fn xcm_server(
531 | |     mut local_addr: *const libc::c_char,
532 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `assure_library_version_logged` is unsafe and requires unsafe block
   --> src/xcm.rs:541:5
    |
541 |     assure_library_version_logged();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:536:1
    |
536 | / pub unsafe extern "C" fn xcm_server_a(
537 | |     mut local_addr: *const libc::c_char,
538 | |     mut attrs: *const xcm_attr_map,
539 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `xcm_tp_proto_by_addr` is unsafe and requires unsafe block
   --> src/xcm.rs:542:42
    |
542 |     let mut proto: *const xcm_tp_proto = xcm_tp_proto_by_addr(local_addr);
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_create` is unsafe and requires unsafe block
   --> src/xcm.rs:544:13
    |
544 |         s = socket_create(proto, xcm_socket_type_server, 1 as libc::c_int != 0);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_init` is unsafe and requires unsafe block
   --> src/xcm.rs:546:18
    |
546 |             if !(xcm_tp_socket_init(s, 0 as *mut xcm_socket) < 0 as libc::c_int) {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `set_attrs` is unsafe and requires unsafe block
   --> src/xcm.rs:547:20
    |
547 |                 if set_attrs(s, 0 as *mut xcm_socket, attrs) < 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_close` is unsafe and requires unsafe block
   --> src/xcm.rs:548:21
    |
548 |                     xcm_tp_socket_close(s);
    |                     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_server` is unsafe and requires unsafe block
   --> src/xcm.rs:549:29
    |
549 |                 } else if !(xcm_tp_socket_server(s, local_addr) < 0 as libc::c_int) {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:553:13
    |
553 |             socket_destroy(s);
    |             ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_close` is unsafe and requires unsafe block
   --> src/xcm.rs:561:9
    |
561 |         xcm_tp_socket_close(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:559:1
    |
559 | pub unsafe extern "C" fn xcm_close(mut s: *mut xcm_socket) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:562:9
    |
562 |         socket_destroy(s);
    |         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_cleanup` is unsafe and requires unsafe block
   --> src/xcm.rs:569:9
    |
569 |         xcm_tp_socket_cleanup(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:567:1
    |
567 | pub unsafe extern "C" fn xcm_cleanup(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:570:9
    |
570 |         socket_destroy(s);
    |         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_accept_a` is unsafe and requires unsafe block
   --> src/xcm.rs:575:12
    |
575 |     return xcm_accept_a(server_s, 0 as *const xcm_attr_map);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:574:1
    |
574 | pub unsafe extern "C" fn xcm_accept(mut server_s: *mut xcm_socket) -> *mut xcm_socket {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:583:8
    |
583 |     if (*server_s).type_0 as libc::c_uint
    |        ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:578:1
    |
578 | / pub unsafe extern "C" fn xcm_accept_a(
579 | |     mut server_s: *mut xcm_socket,
580 | |     mut attrs: *const xcm_attr_map,
581 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:586:12
    |
586 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:587:13
    |
587 | /             __log_event(
588 | |                 log_type_debug,
589 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
590 | |                     as *const u8 as *const libc::c_char,
...   |
599 | |                     as *const libc::c_char,
600 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:592:19
    |
592 |                   (*::core::mem::transmute::<
    |  ___________________^
593 | |                     &[u8; 13],
594 | |                     &[libc::c_char; 13],
595 | |                 >(b"xcm_accept_a\0"))
    | |____________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:602:9
    |
602 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:602:10
    |
602 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:605:33
    |
605 |     let mut is_blocking: bool = (*server_s).is_blocking;
    |                                 ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `socket_create` is unsafe and requires unsafe block
   --> src/xcm.rs:608:18
    |
608 |           conn_s = socket_create(
    |  __________________^
609 | |             (*server_s).proto,
610 | |             xcm_socket_type_conn,
611 | |             (*server_s).is_blocking,
612 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:609:13
    |
609 |             (*server_s).proto,
    |             ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:611:13
    |
611 |             (*server_s).is_blocking,
    |             ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `socket_wait` is unsafe and requires unsafe block
   --> src/xcm.rs:618:16
    |
618 |             && socket_wait(server_s, (1 as libc::c_int) << 2 as libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_init` is unsafe and requires unsafe block
   --> src/xcm.rs:624:12
    |
624 |         if xcm_tp_socket_init(conn_s, server_s) < 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `set_attrs` is unsafe and requires unsafe block
   --> src/xcm.rs:628:12
    |
628 |         if set_attrs(conn_s, server_s, attrs) < 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_accept` is unsafe and requires unsafe block
   --> src/xcm.rs:632:12
    |
632 |         if xcm_tp_socket_accept(conn_s, server_s) < 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:634:20
    |
634 |                 && *__errno_location() == 11 as libc::c_int)
    |                    ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:634:21
    |
634 |                 && *__errno_location() == 11 as libc::c_int)
    |                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:639:13
    |
639 |             socket_destroy(conn_s);
    |             ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_finish` is unsafe and requires unsafe block
   --> src/xcm.rs:641:16
    |
641 |             && socket_finish(conn_s) < 0 as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_close` is unsafe and requires unsafe block
   --> src/xcm.rs:652:13
    |
652 |             xcm_tp_socket_close(conn_s);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_destroy` is unsafe and requires unsafe block
   --> src/xcm.rs:660:13
    |
660 |             socket_destroy(conn_s);
    |             ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_send` is unsafe and requires unsafe block
   --> src/xcm.rs:675:35
    |
675 |           let mut rc: libc::c_int = xcm_tp_socket_send(
    |  ___________________________________^
676 | |             conn_s,
677 | |             buf.offset(sent as isize),
678 | |             left as size_t,
679 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:666:1
    |
666 | / unsafe extern "C" fn bytestream_bsend(
667 | |     mut conn_s: *mut xcm_socket,
668 | |     mut buf: *const libc::c_void,
669 | |     mut len: size_t,
670 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm.rs:677:13
    |
677 |             buf.offset(sent as isize),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:681:16
    |
681 |             if *__errno_location() != 11 as libc::c_int {
    |                ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:681:17
    |
681 |             if *__errno_location() != 11 as libc::c_int {
    |                 ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_wait` is unsafe and requires unsafe block
   --> src/xcm.rs:684:16
    |
684 |             if socket_wait(conn_s, (1 as libc::c_int) << 1 as libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_send` is unsafe and requires unsafe block
   --> src/xcm.rs:704:37
    |
704 |         let mut s_rc: libc::c_int = xcm_tp_socket_send(conn_s, buf, len);
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:698:1
    |
698 | / unsafe extern "C" fn msg_bsend(
699 | |     mut conn_s: *mut xcm_socket,
700 | |     mut buf: *const libc::c_void,
701 | |     mut len: size_t,
702 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:706:16
    |
706 |             if *__errno_location() != 11 as libc::c_int {
    |                ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:706:17
    |
706 |             if *__errno_location() != 11 as libc::c_int {
    |                 ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_wait` is unsafe and requires unsafe block
   --> src/xcm.rs:709:16
    |
709 |             if socket_wait(conn_s, (1 as libc::c_int) << 1 as libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:725:8
    |
725 |     if (*conn_s).type_0 as libc::c_uint
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:720:1
    |
720 | / pub unsafe extern "C" fn xcm_send(
721 | |     mut conn_s: *mut xcm_socket,
722 | |     mut buf: *const libc::c_void,
723 | |     mut len: size_t,
724 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:728:12
    |
728 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:729:13
    |
729 | /             __log_event(
730 | |                 log_type_debug,
731 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
732 | |                     as *const u8 as *const libc::c_char,
...   |
738 | |                     as *const libc::c_char,
739 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:734:19
    |
734 |                 (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"xcm_send\0"))
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:741:9
    |
741 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:741:10
    |
741 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:744:8
    |
744 |     if (*conn_s).is_blocking {
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_is_bytestream` is unsafe and requires unsafe block
   --> src/xcm.rs:746:12
    |
746 |         if xcm_tp_socket_is_bytestream(conn_s) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `bytestream_bsend` is unsafe and requires unsafe block
   --> src/xcm.rs:747:18
    |
747 |             rc = bytestream_bsend(conn_s, buf, len);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `msg_bsend` is unsafe and requires unsafe block
   --> src/xcm.rs:749:18
    |
749 |             rc = msg_bsend(conn_s, buf, len);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_finish` is unsafe and requires unsafe block
   --> src/xcm.rs:751:38
    |
751 |         if rc >= 0 as libc::c_int && socket_finish(conn_s) < 0 as libc::c_int {
    |                                      ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_send` is unsafe and requires unsafe block
   --> src/xcm.rs:756:16
    |
756 |         return xcm_tp_socket_send(conn_s, buf, len)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:765:8
    |
765 |     if (*conn_s).type_0 as libc::c_uint
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:760:1
    |
760 | / pub unsafe extern "C" fn xcm_receive(
761 | |     mut conn_s: *mut xcm_socket,
762 | |     mut buf: *mut libc::c_void,
763 | |     mut capacity: size_t,
764 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:768:12
    |
768 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:769:13
    |
769 | /             __log_event(
770 | |                 log_type_debug,
771 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
772 | |                     as *const u8 as *const libc::c_char,
...   |
781 | |                     as *const libc::c_char,
782 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:774:19
    |
774 |                   (*::core::mem::transmute::<
    |  ___________________^
775 | |                     &[u8; 12],
776 | |                     &[libc::c_char; 12],
777 | |                 >(b"xcm_receive\0"))
    | |___________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:784:9
    |
784 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:784:10
    |
784 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:787:8
    |
787 |     if (*conn_s).is_blocking {
    |        ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `socket_wait` is unsafe and requires unsafe block
   --> src/xcm.rs:789:16
    |
789 |             if socket_wait(conn_s, (1 as libc::c_int) << 0 as libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_receive` is unsafe and requires unsafe block
   --> src/xcm.rs:794:41
    |
794 |             let mut s_rc: libc::c_int = xcm_tp_socket_receive(conn_s, buf, capacity);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:795:44
    |
795 |             if s_rc >= 0 as libc::c_int || *__errno_location() != 11 as libc::c_int {
    |                                            ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:795:45
    |
795 |             if s_rc >= 0 as libc::c_int || *__errno_location() != 11 as libc::c_int {
    |                                             ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_receive` is unsafe and requires unsafe block
   --> src/xcm.rs:800:16
    |
800 |         return xcm_tp_socket_receive(conn_s, buf, capacity)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:808:8
    |
808 |     if (*s).is_blocking {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:804:1
    |
804 | / pub unsafe extern "C" fn xcm_await(
805 | |     mut s: *mut xcm_socket,
806 | |     mut condition: libc::c_int,
807 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:809:12
    |
809 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:810:13
    |
810 | /             __log_event(
811 | |                 log_type_debug,
812 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
813 | |                     as *const u8 as *const libc::c_char,
...   |
824 | |                 strerror(22 as libc::c_int),
825 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:815:19
    |
815 |                   (*::core::mem::transmute::<
    |  ___________________^
816 | |                     &[u8; 10],
817 | |                     &[libc::c_char; 10],
818 | |                 >(b"xcm_await\0"))
    | |_________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/xcm.rs:824:17
    |
824 |                 strerror(22 as libc::c_int),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:827:9
    |
827 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:827:10
    |
827 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:830:11
    |
830 |     if if (*s).type_0 as libc::c_uint
    |           ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:847:12
    |
847 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:848:13
    |
848 | /             __log_event(
849 | |                 log_type_debug,
850 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
851 | |                     as *const u8 as *const libc::c_char,
...   |
862 | |                 strerror(22 as libc::c_int),
863 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:853:19
    |
853 |                   (*::core::mem::transmute::<
    |  ___________________^
854 | |                     &[u8; 10],
855 | |                     &[libc::c_char; 10],
856 | |                 >(b"xcm_await\0"))
    | |_________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/xcm.rs:862:17
    |
862 |                 strerror(22 as libc::c_int),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:865:9
    |
865 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:865:10
    |
865 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:868:8
    |
868 |     if (*s).condition != condition {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:869:12
    |
869 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:870:13
    |
870 | /             __log_event(
871 | |                 log_type_debug,
872 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
873 | |                     as *const u8 as *const libc::c_char,
...   |
884 | |                 tp_so_condition_name(condition),
885 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:875:19
    |
875 |                   (*::core::mem::transmute::<
    |  ___________________^
876 | |                     &[u8; 10],
877 | |                     &[libc::c_char; 10],
878 | |                 >(b"xcm_await\0"))
    | |_________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `tp_so_condition_name` is unsafe and requires unsafe block
   --> src/xcm.rs:883:17
    |
883 |                 tp_so_condition_name((*s).condition),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:883:38
    |
883 |                 tp_so_condition_name((*s).condition),
    |                                      ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `tp_so_condition_name` is unsafe and requires unsafe block
   --> src/xcm.rs:884:17
    |
884 |                 tp_so_condition_name(condition),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:887:15
    |
887 |     } else if log_is_enabled(log_type_debug) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:888:9
    |
888 | /         __log_event(
889 | |             log_type_debug,
890 | |             b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
891 | |                 as *const u8 as *const libc::c_char,
...   |
898 | |             tp_so_condition_name((*s).condition),
899 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:893:15
    |
893 |             (*::core::mem::transmute::<&[u8; 10], &[libc::c_char; 10]>(b"xcm_await\0"))
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `tp_so_condition_name` is unsafe and requires unsafe block
   --> src/xcm.rs:898:13
    |
898 |             tp_so_condition_name((*s).condition),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:898:34
    |
898 |             tp_so_condition_name((*s).condition),
    |                                  ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `await_0` is unsafe and requires unsafe block
   --> src/xcm.rs:901:5
    |
901 |     await_0(s, condition);
    |     ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:906:8
    |
906 |     if (*s).is_blocking {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:905:1
    |
905 | pub unsafe extern "C" fn xcm_fd(mut s: *mut xcm_socket) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:907:12
    |
907 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:908:13
    |
908 | /             __log_event(
909 | |                 log_type_debug,
910 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
911 | |                     as *const u8 as *const libc::c_char,
...   |
919 | |                 strerror(22 as libc::c_int),
920 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:913:19
    |
913 |                 (*::core::mem::transmute::<&[u8; 7], &[libc::c_char; 7]>(b"xcm_fd\0"))
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/xcm.rs:919:17
    |
919 |                 strerror(22 as libc::c_int),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:922:9
    |
922 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:922:10
    |
922 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xpoll_get_fd` is unsafe and requires unsafe block
   --> src/xcm.rs:925:12
    |
925 |     return xpoll_get_fd((*s).xpoll);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:925:25
    |
925 |     return xpoll_get_fd((*s).xpoll);
    |                         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:929:8
    |
929 |     if (*s).is_blocking {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:928:1
    |
928 | pub unsafe extern "C" fn xcm_finish(mut s: *mut xcm_socket) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:930:12
    |
930 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:931:13
    |
931 | /             __log_event(
932 | |                 log_type_debug,
933 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
934 | |                     as *const u8 as *const libc::c_char,
...   |
945 | |                 strerror(22 as libc::c_int),
946 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:936:19
    |
936 |                   (*::core::mem::transmute::<
    |  ___________________^
937 | |                     &[u8; 11],
938 | |                     &[libc::c_char; 11],
939 | |                 >(b"xcm_finish\0"))
    | |__________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/xcm.rs:945:17
    |
945 |                 strerror(22 as libc::c_int),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:948:9
    |
948 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm.rs:948:10
    |
948 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_finish` is unsafe and requires unsafe block
   --> src/xcm.rs:951:31
    |
951 |     let mut rc: libc::c_int = xcm_tp_socket_finish(s);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:959:8
    |
959 |     if log_is_enabled(log_type_debug) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm.rs:955:1
    |
955 | / pub unsafe extern "C" fn xcm_set_blocking(
956 | |     mut s: *mut xcm_socket,
957 | |     mut should_block: bool,
958 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:960:9
    |
960 | /         __log_event(
961 | |             log_type_debug,
962 | |             b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
963 | |                 as *const u8 as *const libc::c_char,
...   |
977 | |             },
978 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:965:15
    |
965 |               (*::core::mem::transmute::<
    |  _______________^
966 | |                 &[u8; 17],
967 | |                 &[libc::c_char; 17],
968 | |             >(b"xcm_set_blocking\0"))
    | |____________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:980:8
    |
980 |     if (*s).is_blocking as libc::c_int == should_block as libc::c_int {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:981:12
    |
981 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm.rs:982:13
    |
982 | /             __log_event(
983 | |                 log_type_debug,
984 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
985 | |                     as *const u8 as *const libc::c_char,
...   |
993 | |                 b"Mode unchanged.\0" as *const u8 as *const libc::c_char,
994 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm.rs:987:19
    |
987 |                   (*::core::mem::transmute::<
    |  ___________________^
988 | |                     &[u8; 17],
989 | |                     &[libc::c_char; 17],
990 | |                 >(b"xcm_set_blocking\0"))
    | |________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm.rs:998:9
    |
998 |     if !(*s).is_blocking {
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm.rs:999:12
    |
999 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm.rs:1000:13
     |
1000 | /             __log_event(
1001 | |                 log_type_debug,
1002 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
1003 | |                     as *const u8 as *const libc::c_char,
...    |
1012 | |                     as *const u8 as *const libc::c_char,
1013 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm.rs:1005:19
     |
1005 |                   (*::core::mem::transmute::<
     |  ___________________^
1006 | |                     &[u8; 17],
1007 | |                     &[libc::c_char; 17],
1008 | |                 >(b"xcm_set_blocking\0"))
     | |________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `socket_finish` is unsafe and requires unsafe block
    --> src/xcm.rs:1015:12
     |
1015 |         if socket_finish(s) < 0 as libc::c_int {
     |            ^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm.rs:1019:8
     |
1019 |     if log_is_enabled(log_type_debug) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm.rs:1020:9
     |
1020 | /         __log_event(
1021 | |             log_type_debug,
1022 | |             b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
1023 | |                 as *const u8 as *const libc::c_char,
...    |
1031 | |             b"Mode changed.\0" as *const u8 as *const libc::c_char,
1032 | |         );
     | |_________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm.rs:1025:15
     |
1025 |               (*::core::mem::transmute::<
     |  _______________^
1026 | |                 &[u8; 17],
1027 | |                 &[libc::c_char; 17],
1028 | |             >(b"xcm_set_blocking\0"))
     | |____________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1034:5
     |
1034 |     (*s).is_blocking = should_block;
     |     ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1039:12
     |
1039 |     return (*s).is_blocking;
     |            ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1038:1
     |
1038 | pub unsafe extern "C" fn xcm_is_blocking(mut s: *mut xcm_socket) -> bool {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1045:8
     |
1045 |     if (*conn_s).type_0 as libc::c_uint
     |        ^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1042:1
     |
1042 | / pub unsafe extern "C" fn xcm_remote_addr(
1043 | |     mut conn_s: *mut xcm_socket,
1044 | | ) -> *const libc::c_char {
     | |________________________^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm.rs:1048:12
     |
1048 |         if log_is_enabled(log_type_debug) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm.rs:1049:13
     |
1049 | /             __log_event(
1050 | |                 log_type_debug,
1051 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm.c\0"
1052 | |                     as *const u8 as *const libc::c_char,
...    |
1061 | |                     as *const libc::c_char,
1062 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm.rs:1054:19
     |
1054 |                   (*::core::mem::transmute::<
     |  ___________________^
1055 | |                     &[u8; 16],
1056 | |                     &[libc::c_char; 16],
1057 | |                 >(b"xcm_remote_addr\0"))
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1064:9
     |
1064 |         *__errno_location() = 22 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1064:10
     |
1064 |         *__errno_location() = 22 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_remote_addr` is unsafe and requires unsafe block
    --> src/xcm.rs:1067:12
     |
1067 |     return xcm_tp_socket_get_remote_addr(conn_s, 0 as libc::c_int != 0);
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_local_addr` is unsafe and requires unsafe block
    --> src/xcm.rs:1071:12
     |
1071 |     return xcm_tp_socket_get_local_addr(s, 0 as libc::c_int != 0);
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1070:1
     |
1070 | pub unsafe extern "C" fn xcm_local_addr(mut s: *mut xcm_socket) -> *const libc::c_char {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `attr_tree_create` is unsafe and requires unsafe block
    --> src/xcm.rs:1074:41
     |
1074 |     let mut attr_tree: *mut attr_tree = attr_tree_create();
     |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1073:1
     |
1073 | unsafe extern "C" fn build_attr_tree(mut s: *mut xcm_socket) -> *mut attr_tree {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `xcm_tp_common_attr_populate` is unsafe and requires unsafe block
    --> src/xcm.rs:1075:5
     |
1075 |     xcm_tp_common_attr_populate(s, attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_attr_populate` is unsafe and requires unsafe block
    --> src/xcm.rs:1076:5
     |
1076 |     xcm_tp_socket_attr_populate(s, attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `build_attr_tree` is unsafe and requires unsafe block
    --> src/xcm.rs:1087:41
     |
1087 |     let mut attr_tree: *mut attr_tree = build_attr_tree(s);
     |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1080:1
     |
1080 | / pub unsafe extern "C" fn xcm_attr_set(
1081 | |     mut s: *mut xcm_socket,
1082 | |     mut name: *const libc::c_char,
1083 | |     mut type_0: xcm_attr_type,
1084 | |     mut value: *const libc::c_void,
1085 | |     mut len: size_t,
1086 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_tree_set_value` is unsafe and requires unsafe block
    --> src/xcm.rs:1088:31
     |
1088 |       let mut rc: libc::c_int = attr_tree_set_value(
     |  _______________________________^
1089 | |         attr_tree,
1090 | |         name,
1091 | |         type_0,
...    |
1094 | |         s as *mut libc::c_void,
1095 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_destroy` is unsafe and requires unsafe block
    --> src/xcm.rs:1096:5
     |
1096 |     attr_tree_destroy(attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_set` is unsafe and requires unsafe block
    --> src/xcm.rs:1105:12
     |
1105 |       return xcm_attr_set(
     |  ____________^
1106 | |         s,
1107 | |         name,
1108 | |         xcm_attr_type_bool,
1109 | |         &mut value as *mut bool as *const libc::c_void,
1110 | |         ::core::mem::size_of::<bool>() as libc::c_ulong,
1111 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1100:1
     |
1100 | / pub unsafe extern "C" fn xcm_attr_set_bool(
1101 | |     mut s: *mut xcm_socket,
1102 | |     mut name: *const libc::c_char,
1103 | |     mut value: bool,
1104 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `xcm_attr_set` is unsafe and requires unsafe block
    --> src/xcm.rs:1119:12
     |
1119 |       return xcm_attr_set(
     |  ____________^
1120 | |         s,
1121 | |         name,
1122 | |         xcm_attr_type_int64,
1123 | |         &mut value as *mut int64_t as *const libc::c_void,
1124 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
1125 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1114:1
     |
1114 | / pub unsafe extern "C" fn xcm_attr_set_int64(
1115 | |     mut s: *mut xcm_socket,
1116 | |     mut name: *const libc::c_char,
1117 | |     mut value: int64_t,
1118 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `xcm_attr_set` is unsafe and requires unsafe block
    --> src/xcm.rs:1133:12
     |
1133 |       return xcm_attr_set(
     |  ____________^
1134 | |         s,
1135 | |         name,
1136 | |         xcm_attr_type_double,
1137 | |         &mut value as *mut libc::c_double as *const libc::c_void,
1138 | |         ::core::mem::size_of::<libc::c_double>() as libc::c_ulong,
1139 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1128:1
     |
1128 | / pub unsafe extern "C" fn xcm_attr_set_double(
1129 | |     mut s: *mut xcm_socket,
1130 | |     mut name: *const libc::c_char,
1131 | |     mut value: libc::c_double,
1132 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `xcm_attr_set` is unsafe and requires unsafe block
    --> src/xcm.rs:1147:12
     |
1147 |       return xcm_attr_set(
     |  ____________^
1148 | |         s,
1149 | |         name,
1150 | |         xcm_attr_type_str,
1151 | |         value as *const libc::c_void,
1152 | |         (strlen(value)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1153 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1142:1
     |
1142 | / pub unsafe extern "C" fn xcm_attr_set_str(
1143 | |     mut s: *mut xcm_socket,
1144 | |     mut name: *const libc::c_char,
1145 | |     mut value: *const libc::c_char,
1146 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/xcm.rs:1152:9
     |
1152 |         (strlen(value)).wrapping_add(1 as libc::c_int as libc::c_ulong),
     |         ^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `build_attr_tree` is unsafe and requires unsafe block
    --> src/xcm.rs:1163:41
     |
1163 |     let mut attr_tree: *mut attr_tree = build_attr_tree(s);
     |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1156:1
     |
1156 | / pub unsafe extern "C" fn xcm_attr_get(
1157 | |     mut s: *mut xcm_socket,
1158 | |     mut name: *const libc::c_char,
1159 | |     mut type_0: *mut xcm_attr_type,
1160 | |     mut value: *mut libc::c_void,
1161 | |     mut capacity: size_t,
1162 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_tree_get_value` is unsafe and requires unsafe block
    --> src/xcm.rs:1164:31
     |
1164 |       let mut rc: libc::c_int = attr_tree_get_value(
     |  _______________________________^
1165 | |         attr_tree,
1166 | |         name,
1167 | |         type_0,
...    |
1170 | |         s as *mut libc::c_void,
1171 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_destroy` is unsafe and requires unsafe block
    --> src/xcm.rs:1172:5
     |
1172 |     attr_tree_destroy(attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_get` is unsafe and requires unsafe block
    --> src/xcm.rs:1183:31
     |
1183 |     let mut rc: libc::c_int = xcm_attr_get(s, name, &mut actual_type, value, capacity);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1175:1
     |
1175 | / unsafe extern "C" fn attr_get_with_type(
1176 | |     mut s: *mut xcm_socket,
1177 | |     mut name: *const libc::c_char,
1178 | |     mut required_type: xcm_attr_type,
1179 | |     mut value: *mut libc::c_void,
1180 | |     mut capacity: size_t,
1181 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1185:12
     |
1185 |         if *__errno_location() == 75 as libc::c_int {
     |            ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1185:13
     |
1185 |         if *__errno_location() == 75 as libc::c_int {
     |             ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1186:13
     |
1186 |             *__errno_location() = 2 as libc::c_int;
     |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1186:14
     |
1186 |             *__errno_location() = 2 as libc::c_int;
     |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1191:9
     |
1191 |         *__errno_location() = 2 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1191:10
     |
1191 |         *__errno_location() = 2 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_get_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1202:12
     |
1202 |       return attr_get_with_type(
     |  ____________^
1203 | |         s,
1204 | |         name,
1205 | |         xcm_attr_type_bool,
1206 | |         value as *mut libc::c_void,
1207 | |         ::core::mem::size_of::<bool>() as libc::c_ulong,
1208 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1197:1
     |
1197 | / pub unsafe extern "C" fn xcm_attr_get_bool(
1198 | |     mut s: *mut xcm_socket,
1199 | |     mut name: *const libc::c_char,
1200 | |     mut value: *mut bool,
1201 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_get_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1216:12
     |
1216 |       return attr_get_with_type(
     |  ____________^
1217 | |         s,
1218 | |         name,
1219 | |         xcm_attr_type_int64,
1220 | |         value as *mut libc::c_void,
1221 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
1222 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1211:1
     |
1211 | / pub unsafe extern "C" fn xcm_attr_get_int64(
1212 | |     mut s: *mut xcm_socket,
1213 | |     mut name: *const libc::c_char,
1214 | |     mut value: *mut int64_t,
1215 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_get_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1230:12
     |
1230 |       return attr_get_with_type(
     |  ____________^
1231 | |         s,
1232 | |         name,
1233 | |         xcm_attr_type_double,
1234 | |         value as *mut libc::c_void,
1235 | |         ::core::mem::size_of::<libc::c_double>() as libc::c_ulong,
1236 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1225:1
     |
1225 | / pub unsafe extern "C" fn xcm_attr_get_double(
1226 | |     mut s: *mut xcm_socket,
1227 | |     mut name: *const libc::c_char,
1228 | |     mut value: *mut libc::c_double,
1229 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `xcm_attr_get` is unsafe and requires unsafe block
    --> src/xcm.rs:1246:31
     |
1246 |       let mut rc: libc::c_int = xcm_attr_get(
     |  _______________________________^
1247 | |         s,
1248 | |         name,
1249 | |         &mut type_0,
1250 | |         value as *mut libc::c_void,
1251 | |         capacity,
1252 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1239:1
     |
1239 | / pub unsafe extern "C" fn xcm_attr_get_str(
1240 | |     mut s: *mut xcm_socket,
1241 | |     mut name: *const libc::c_char,
1242 | |     mut value: *mut libc::c_char,
1243 | |     mut capacity: size_t,
1244 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1257:9
     |
1257 |         *__errno_location() = 2 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1257:10
     |
1257 |         *__errno_location() = 2 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_attr_get` is unsafe and requires unsafe block
    --> src/xcm.rs:1270:31
     |
1270 |     let mut rc: libc::c_int = xcm_attr_get(s, name, &mut type_0, value, capacity);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1263:1
     |
1263 | / pub unsafe extern "C" fn xcm_attr_get_bin(
1264 | |     mut s: *mut xcm_socket,
1265 | |     mut name: *const libc::c_char,
1266 | |     mut value: *mut libc::c_void,
1267 | |     mut capacity: size_t,
1268 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm.rs:1275:9
     |
1275 |         *__errno_location() = 2 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm.rs:1275:10
     |
1275 |         *__errno_location() = 2 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `build_attr_tree` is unsafe and requires unsafe block
    --> src/xcm.rs:1285:41
     |
1285 |     let mut attr_tree: *mut attr_tree = build_attr_tree(s);
     |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1281:1
     |
1281 | / pub unsafe extern "C" fn xcm_attr_get_list_len(
1282 | |     mut s: *mut xcm_socket,
1283 | |     mut name: *const libc::c_char,
1284 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_tree_get_list_len` is unsafe and requires unsafe block
    --> src/xcm.rs:1286:31
     |
1286 |       let mut rc: libc::c_int = attr_tree_get_list_len(
     |  _______________________________^
1287 | |         attr_tree,
1288 | |         name,
1289 | |         s as *mut libc::c_void,
1290 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_destroy` is unsafe and requires unsafe block
    --> src/xcm.rs:1291:5
     |
1291 |     attr_tree_destroy(attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_vasprintf` is unsafe and requires unsafe block
    --> src/xcm.rs:1305:39
     |
1305 |     let mut name: *mut libc::c_char = ut_vasprintf(name_fmt, ap.as_va_list());
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1295:1
     |
1295 | / pub unsafe extern "C" fn xcm_attr_getf(
1296 | |     mut s: *mut xcm_socket,
1297 | |     mut type_0: *mut xcm_attr_type,
1298 | |     mut value: *mut libc::c_void,
...    |
1301 | |     mut args: ...
1302 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `xcm_attr_get` is unsafe and requires unsafe block
    --> src/xcm.rs:1306:31
     |
1306 |     let mut rc: libc::c_int = xcm_attr_get(s, name, type_0, value, capacity);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_free` is unsafe and requires unsafe block
    --> src/xcm.rs:1307:5
     |
1307 |     ut_free(name as *mut libc::c_void);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_vasprintf` is unsafe and requires unsafe block
    --> src/xcm.rs:1318:39
     |
1318 |     let mut name: *mut libc::c_char = ut_vasprintf(name_fmt, ap.as_va_list());
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1310:1
     |
1310 | / unsafe extern "C" fn attr_vgetf_with_type(
1311 | |     mut s: *mut xcm_socket,
1312 | |     mut required_type: xcm_attr_type,
1313 | |     mut value: *mut libc::c_void,
...    |
1316 | |     mut ap: ::core::ffi::VaList,
1317 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_get_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1319:31
     |
1319 |       let mut rc: libc::c_int = attr_get_with_type(
     |  _______________________________^
1320 | |         s,
1321 | |         name,
1322 | |         required_type,
1323 | |         value,
1324 | |         capacity,
1325 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_free` is unsafe and requires unsafe block
    --> src/xcm.rs:1326:5
     |
1326 |     ut_free(name as *mut libc::c_void);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_vgetf_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1338:31
     |
1338 |       let mut rc: libc::c_int = attr_vgetf_with_type(
     |  _______________________________^
1339 | |         s,
1340 | |         xcm_attr_type_bool,
1341 | |         value as *mut libc::c_void,
...    |
1344 | |         ap.as_va_list(),
1345 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1330:1
     |
1330 | / pub unsafe extern "C" fn xcm_attr_getf_bool(
1331 | |     mut s: *mut xcm_socket,
1332 | |     mut value: *mut bool,
1333 | |     mut name_fmt: *const libc::c_char,
1334 | |     mut args: ...
1335 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_vgetf_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1357:31
     |
1357 |       let mut rc: libc::c_int = attr_vgetf_with_type(
     |  _______________________________^
1358 | |         s,
1359 | |         xcm_attr_type_int64,
1360 | |         value as *mut libc::c_void,
...    |
1363 | |         ap.as_va_list(),
1364 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1349:1
     |
1349 | / pub unsafe extern "C" fn xcm_attr_getf_int64(
1350 | |     mut s: *mut xcm_socket,
1351 | |     mut value: *mut int64_t,
1352 | |     mut name_fmt: *const libc::c_char,
1353 | |     mut args: ...
1354 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_vgetf_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1376:31
     |
1376 |       let mut rc: libc::c_int = attr_vgetf_with_type(
     |  _______________________________^
1377 | |         s,
1378 | |         xcm_attr_type_double,
1379 | |         value as *mut libc::c_void,
...    |
1382 | |         ap.as_va_list(),
1383 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1368:1
     |
1368 | / pub unsafe extern "C" fn xcm_attr_getf_double(
1369 | |     mut s: *mut xcm_socket,
1370 | |     mut value: *mut libc::c_double,
1371 | |     mut name_fmt: *const libc::c_char,
1372 | |     mut args: ...
1373 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_vgetf_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1396:31
     |
1396 |       let mut rc: libc::c_int = attr_vgetf_with_type(
     |  _______________________________^
1397 | |         s,
1398 | |         xcm_attr_type_str,
1399 | |         value as *mut libc::c_void,
...    |
1402 | |         ap.as_va_list(),
1403 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1387:1
     |
1387 | / pub unsafe extern "C" fn xcm_attr_getf_str(
1388 | |     mut s: *mut xcm_socket,
1389 | |     mut value: *mut libc::c_char,
1390 | |     mut capacity: size_t,
1391 | |     mut name_fmt: *const libc::c_char,
1392 | |     mut args: ...
1393 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `attr_vgetf_with_type` is unsafe and requires unsafe block
    --> src/xcm.rs:1416:31
     |
1416 |       let mut rc: libc::c_int = attr_vgetf_with_type(
     |  _______________________________^
1417 | |         s,
1418 | |         xcm_attr_type_bin,
1419 | |         value,
...    |
1422 | |         ap.as_va_list(),
1423 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1407:1
     |
1407 | / pub unsafe extern "C" fn xcm_attr_getf_bin(
1408 | |     mut s: *mut xcm_socket,
1409 | |     mut value: *mut libc::c_void,
1410 | |     mut capacity: size_t,
1411 | |     mut name_fmt: *const libc::c_char,
1412 | |     mut args: ...
1413 | | ) -> libc::c_int {
     | |________________^

warning[E0133]: call to unsafe function `build_attr_tree` is unsafe and requires unsafe block
    --> src/xcm.rs:1432:41
     |
1432 |     let mut attr_tree: *mut attr_tree = build_attr_tree(s);
     |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm.rs:1427:1
     |
1427 | / pub unsafe extern "C" fn xcm_attr_get_all(
1428 | |     mut s: *mut xcm_socket,
1429 | |     mut cb: xcm_attr_cb,
1430 | |     mut cb_data: *mut libc::c_void,
1431 | | ) {
     | |_^

warning[E0133]: call to unsafe function `attr_tree_get_all` is unsafe and requires unsafe block
    --> src/xcm.rs:1433:5
     |
1433 |     attr_tree_get_all(attr_tree, cb, cb_data);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_destroy` is unsafe and requires unsafe block
    --> src/xcm.rs:1434:5
     |
1434 |     attr_tree_destroy(attr_tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

For more information about this error, try `rustc --explain E0133`.
warning: `rs-core` (lib) generated 241 warnings (run `cargo fix --lib -p rs-core` to apply 52 suggestions)
    Finished `release` profile [optimized] target(s) in 0.04s
warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/log.rs:192:9
    |
192 | /         snprintf(
193 | |             sref.as_mut_ptr(),
194 | |             ::core::mem::size_of::<[libc::c_char; 64]>() as libc::c_ulong,
195 | |             b" <%ld>\0" as *const u8 as *const libc::c_char,
196 | |             (*s).sock_id,
197 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/log.rs:180:1
    |
180 | / unsafe extern "C" fn format_msg(
181 | |     mut buf: *mut libc::c_char,
182 | |     mut capacity: size_t,
183 | |     mut file: *const libc::c_char,
...   |
188 | |     mut ap: ::core::ffi::VaList,
189 | | ) {
    | |_^
    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log.rs:196:13
    |
196 |             (*s).sock_id,
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
   --> src/log.rs:202:5
    |
202 |     strcpy(bname.as_mut_ptr(), file);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/log.rs:203:5
    |
203 | /     snprintf(
204 | |         buf,
205 | |         capacity,
206 | |         b"TID %d: %s [%s:%d]%s: \0" as *const u8 as *const libc::c_char,
...   |
211 | |         sref.as_mut_ptr(),
212 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_gettid` is unsafe and requires unsafe block
   --> src/log.rs:207:9
    |
207 |         ut_gettid(),
    |         ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__xpg_basename` is unsafe and requires unsafe block
   --> src/log.rs:209:9
    |
209 |         __xpg_basename(bname.as_mut_ptr()),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_vaprintf` is unsafe and requires unsafe block
   --> src/log.rs:213:5
    |
213 |     ut_vaprintf(buf, capacity, format, ap.as_va_list());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_aprintf` is unsafe and requires unsafe block
   --> src/log.rs:214:5
    |
214 |     ut_aprintf(buf, capacity, b"\n\0" as *const u8 as *const libc::c_char);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log.rs:227:40
    |
227 |         let mut _oerrno: libc::c_int = *__errno_location();
    |                                        ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/log.rs:217:1
    |
217 | / unsafe extern "C" fn log_console(
218 | |     mut file: *const libc::c_char,
219 | |     mut line: libc::c_int,
220 | |     mut function: *const libc::c_char,
...   |
223 | |     mut ap: ::core::ffi::VaList,
224 | | ) {
    | |_^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/log.rs:227:41
    |
227 |         let mut _oerrno: libc::c_int = *__errno_location();
    |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `format_msg` is unsafe and requires unsafe block
   --> src/log.rs:229:9
    |
229 | /         format_msg(
230 | |             buf.as_mut_ptr(),
231 | |             ::core::mem::size_of::<[libc::c_char; 8192]>() as libc::c_ulong,
232 | |             file,
...   |
237 | |             ap.as_va_list(),
238 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `fputs` is unsafe and requires unsafe block
   --> src/log.rs:239:9
    |
239 |         fputs(buf.as_mut_ptr(), stderr);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/log.rs:239:33
    |
239 |         fputs(buf.as_mut_ptr(), stderr);
    |                                 ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `fflush` is unsafe and requires unsafe block
   --> src/log.rs:240:9
    |
240 |         fflush(stderr);
    |         ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/log.rs:240:16
    |
240 |         fflush(stderr);
    |                ^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log.rs:241:9
    |
241 |         *__errno_location() = _oerrno;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/log.rs:241:10
    |
241 |         *__errno_location() = _oerrno;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `type_0`
   --> src/log.rs:245:45
    |
245 | pub unsafe extern "C" fn log_is_enabled(mut type_0: log_type) -> bool {
    |                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_type_0`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `type_0`
   --> src/log.rs:254:9
    |
254 |     mut type_0: log_type,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_type_0`

warning[E0133]: call to unsafe function `log_console` is unsafe and requires unsafe block
   --> src/log.rs:264:5
    |
264 |     log_console(file, line, function, s, format, ap.as_va_list());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/log.rs:253:1
    |
253 | / pub unsafe extern "C" fn __log_event(
254 | |     mut type_0: log_type,
255 | |     mut file: *const libc::c_char,
256 | |     mut line: libc::c_int,
...   |
260 | |     mut args: ...
261 | | ) {
    | |_^

For more information about this error, try `rustc --explain E0133`.
warning: `rs-log` (lib) generated 20 warnings (run `cargo fix --lib -p rs-log` to apply 3 suggestions)
    Finished `release` profile [optimized] target(s) in 0.01s
warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:53:16
   |
53 |             if *(value as *mut bool) {
   |                ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/log_attr_tree.rs:44:1
   |
44 | / pub unsafe extern "C" fn log_attr_str_value(
45 | |     mut type_0: xcm_attr_type,
46 | |     mut value: *const libc::c_void,
47 | |     mut len: size_t,
48 | |     mut buf: *mut libc::c_char,
49 | |     mut capacity: size_t,
50 | | ) {
   | |_^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:54:17
   |
54 |                 strcpy(buf, b"true\0" as *const u8 as *const libc::c_char);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:56:17
   |
56 |                 strcpy(buf, b"false\0" as *const u8 as *const libc::c_char);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:60:13
   |
60 | /             snprintf(
61 | |                 buf,
62 | |                 capacity,
63 | |                 b"%ld\0" as *const u8 as *const libc::c_char,
64 | |                 *(value as *const int64_t),
65 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:64:17
   |
64 |                 *(value as *const int64_t),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:68:13
   |
68 | /             snprintf(
69 | |                 buf,
70 | |                 capacity,
71 | |                 b"%f\0" as *const u8 as *const libc::c_char,
72 | |                 *(value as *const libc::c_double),
73 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:72:17
   |
72 |                 *(value as *const libc::c_double),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:76:13
   |
76 | /             snprintf(
77 | |                 buf,
78 | |                 capacity,
79 | |                 b"\"%s\"\0" as *const u8 as *const libc::c_char,
80 | |                 value as *const libc::c_char,
81 | |             );
   | |_____________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:82:13
   |
82 | /             *buf
83 | |                 .offset(
84 | |                     capacity.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
85 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:82:14
   |
82 |               *buf
   |  ______________^
83 | |                 .offset(
84 | |                     capacity.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
85 | |                 ) = '\0' as i32 as libc::c_char;
   | |_________________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
  --> src/log_attr_tree.rs:89:17
   |
89 | /                 strcpy(
90 | |                     buf,
91 | |                     b"<zero-length binary data>\0" as *const u8 as *const libc::c_char,
92 | |                 );
   | |_________________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:101:25
    |
101 | /                         snprintf(
102 | |                             buf,
103 | |                             capacity,
104 | |                             b"<%zd bytes of data>\0" as *const u8 as *const libc::c_char,
105 | |                             len,
106 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:110:29
    |
110 | ...                   *buf.offset(offset as isize) = ':' as i32 as libc::c_char;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:110:30
    |
110 | ...                   *buf.offset(offset as isize) = ':' as i32 as libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:114:25
    |
114 | /                         snprintf(
115 | |                             buf.offset(offset as isize),
116 | |                             capacity.wrapping_sub(offset),
117 | |                             b"%02x\0" as *const u8 as *const libc::c_char,
118 | |                             *value_bin.offset(i as isize) as libc::c_int,
119 | |                         );
    | |_________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:115:29
    |
115 | ...                   buf.offset(offset as isize),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:118:29
    |
118 | ...                   *value_bin.offset(i as isize) as libc::c_int,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:118:30
    |
118 | ...                   *value_bin.offset(i as isize) as libc::c_int,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:127:17
    |
127 |                 *buf.offset(offset as isize) = '\0' as i32 as libc::c_char;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/log_attr_tree.rs:127:18
    |
127 |                 *buf.offset(offset as isize) = '\0' as i32 as libc::c_char;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: path statement with no effect
   --> src/log_attr_tree.rs:112:29
    |
112 | ...                   offset;
    |                       ^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/log_attr_tree.rs:124:25
    |
124 |                         i;
    |                         ^^

For more information about this error, try `rustc --explain E0133`.
warning: `rs-log-attr-tree` (lib) generated 22 warnings (run `cargo fix --lib -p rs-log-attr-tree` to apply 1 suggestion)
    Finished `release` profile [optimized] target(s) in 0.01s
warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:245:36
    |
245 |     let mut _oerrno: libc::c_int = *__errno_location();
    |                                    ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:228:1
    |
228 | / unsafe extern "C" fn is_valid_addr(
229 | |     mut xcm_addr_s: *const libc::c_char,
230 | |     mut require_supported: bool,
231 | | ) -> bool {
    | |_________^
    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:245:37
    |
245 |     let mut _oerrno: libc::c_int = *__errno_location();
    |                                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_proto` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:246:10
    |
246 |       rc = xcm_addr_parse_proto(
    |  __________^
247 | |         xcm_addr_s,
248 | |         proto.as_mut_ptr(),
249 | |         ::core::mem::size_of::<[libc::c_char; 32]>() as libc::c_ulong,
250 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:264:12
    |
264 |         if strcmp(b"tcp\0" as *const u8 as *const libc::c_char, proto.as_mut_ptr())
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_tcp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:267:18
    |
267 |             rc = xcm_addr_parse_tcp(xcm_addr_s, &mut host, &mut port);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:268:19
    |
268 |           } else if strcmp(
    |  ___________________^
269 | |             b"btcp\0" as *const u8 as *const libc::c_char,
270 | |             proto.as_mut_ptr(),
271 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_btcp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:273:18
    |
273 |             rc = xcm_addr_parse_btcp(xcm_addr_s, &mut host, &mut port);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:274:19
    |
274 |         } else if strcmp(b"ux\0" as *const u8 as *const libc::c_char, proto.as_mut_ptr())
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_ux` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:277:18
    |
277 |               rc = xcm_addr_parse_ux(
    |  __________________^
278 | |                 xcm_addr_s,
279 | |                 ux_name.as_mut_ptr(),
280 | |                 ::core::mem::size_of::<[libc::c_char; 579]>() as libc::c_ulong,
281 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:282:19
    |
282 |           } else if strcmp(
    |  ___________________^
283 | |             b"uxf\0" as *const u8 as *const libc::c_char,
284 | |             proto.as_mut_ptr(),
285 | |         ) == 0 as libc::c_int
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_uxf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:287:18
    |
287 |               rc = xcm_addr_parse_uxf(
    |  __________________^
288 | |                 xcm_addr_s,
289 | |                 ux_name.as_mut_ptr(),
290 | |                 ::core::mem::size_of::<[libc::c_char; 579]>() as libc::c_ulong,
291 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `supports_tls` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:293:12
    |
293 |         if supports_tls() as libc::c_int != 0 || !require_supported {
    |            ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:294:16
    |
294 |             if strcmp(b"utls\0" as *const u8 as *const libc::c_char, proto.as_mut_ptr())
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_utls` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:297:22
    |
297 |                 rc = xcm_addr_parse_utls(xcm_addr_s, &mut host, &mut port);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:298:23
    |
298 |               } else if strcmp(
    |  _______________________^
299 | |                 b"tls\0" as *const u8 as *const libc::c_char,
300 | |                 proto.as_mut_ptr(),
301 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_tls` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:303:22
    |
303 |                 rc = xcm_addr_parse_tls(xcm_addr_s, &mut host, &mut port);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:304:23
    |
304 |               } else if strcmp(
    |  _______________________^
305 | |                 b"btls\0" as *const u8 as *const libc::c_char,
306 | |                 proto.as_mut_ptr(),
307 | |             ) == 0 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_btls` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:309:22
    |
309 |                 rc = xcm_addr_parse_btls(xcm_addr_s, &mut host, &mut port);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `supports_sctp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:312:12
    |
312 |         if supports_sctp() as libc::c_int != 0 || !require_supported {
    |            ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:313:16
    |
313 |             if strcmp(b"sctp\0" as *const u8 as *const libc::c_char, proto.as_mut_ptr())
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_sctp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:316:22
    |
316 |                 rc = xcm_addr_parse_sctp(xcm_addr_s, &mut host, &mut port);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:320:5
    |
320 |     *__errno_location() = _oerrno;
    |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:320:6
    |
320 |     *__errno_location() = _oerrno;
    |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `is_valid_addr` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:325:12
    |
325 |     return is_valid_addr(xcm_addr_s, 0 as libc::c_int != 0);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:324:1
    |
324 | pub unsafe extern "C" fn xcm_addr_is_valid(mut xcm_addr_s: *const libc::c_char) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `is_valid_addr` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:331:12
    |
331 |     return is_valid_addr(xcm_addr_s, 1 as libc::c_int != 0);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:328:1
    |
328 | / pub unsafe extern "C" fn xcm_addr_is_supported(
329 | |     mut xcm_addr_s: *const libc::c_char,
330 | | ) -> bool {
    | |_________^

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:336:34
    |
336 |     while (i as libc::c_ulong) < strlen(s) {
    |                                  ^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:333:1
    |
333 | unsafe extern "C" fn has_space(mut s: *const libc::c_char) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:12
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:13
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:13
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |             ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__ctype_b_loc` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:15
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |               ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:39
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |                                       ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:337:40
    |
337 |         if *(*__ctype_b_loc()).offset(*s.offset(i as isize) as libc::c_int as isize)
    |                                        ^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:358:10
    |
358 |     if !(strlen(addr_s)
    |          ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:348:1
    |
348 | / unsafe extern "C" fn proto_addr_parse(
349 | |     mut addr_s: *const libc::c_char,
350 | |     mut proto: *mut libc::c_char,
351 | |     mut proto_capacity: size_t,
352 | |     mut proto_addr: *mut libc::c_char,
353 | |     mut proto_addr_capacity: size_t,
354 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `has_space` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:360:33
    |
360 |             as libc::c_ulong || has_space(addr_s) as libc::c_int != 0)
    |                                 ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strchr` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:362:21
    |
362 |         proto_sep = strchr(addr_s, ':' as i32);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset_from` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:364:25
    |
364 |             proto_len = proto_sep.offset_from(addr_s) as libc::c_long as size_t;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:367:40
    |
367 |                       proto_addr_start = addr_s
    |  ________________________________________^
368 | |                         .offset(proto_len as isize)
369 | |                         .offset(1 as libc::c_int as isize);
    | |__________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:367:40
    |
367 |                       proto_addr_start = addr_s
    |  ________________________________________^
368 | |                         .offset(proto_len as isize)
    | |___________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:370:26
    |
370 |                     if !(strlen(proto_addr_start) >= proto_addr_capacity) {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strncpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:371:25
    |
371 |                         strncpy(proto, addr_s, proto_len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:372:25
    |
372 |                         *proto.offset(proto_len as isize) = '\0' as i32 as libc::c_char;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:372:26
    |
372 |                         *proto.offset(proto_len as isize) = '\0' as i32 as libc::c_char;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:373:25
    |
373 |                         strcpy(proto_addr, proto_addr_start);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:377:17
    |
377 |                 *__errno_location() = 36 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:377:18
    |
377 |                 *__errno_location() = 36 as libc::c_int;
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:382:5
    |
382 |     *__errno_location() = 22 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:382:6
    |
382 |     *__errno_location() = 22 as libc::c_int;
    |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `proto_addr_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:392:12
    |
392 |       return proto_addr_parse(
    |  ____________^
393 | |         addr_s,
394 | |         proto,
395 | |         capacity,
396 | |         proto_addr.as_mut_ptr(),
397 | |         ::core::mem::size_of::<[libc::c_char; 579]>() as libc::c_ulong,
398 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:386:1
    |
386 | / pub unsafe extern "C" fn xcm_addr_parse_proto(
387 | |     mut addr_s: *const libc::c_char,
388 | |     mut proto: *mut libc::c_char,
389 | |     mut capacity: size_t,
390 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `proto_addr_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:408:8
    |
408 |       if proto_addr_parse(
    |  ________^
409 | |         ux_addr_s,
410 | |         proto.as_mut_ptr(),
411 | |         ::core::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong,
412 | |         name.as_mut_ptr(),
413 | |         ::core::mem::size_of::<[libc::c_char; 579]>() as libc::c_ulong,
414 | |     ) < 0 as libc::c_int
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:400:1
    |
400 | / unsafe extern "C" fn addr_parse_ux_uxf(
401 | |     mut ux_proto: *const libc::c_char,
402 | |     mut ux_addr_s: *const libc::c_char,
403 | |     mut ux_name: *mut libc::c_char,
404 | |     mut capacity: size_t,
405 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:418:8
    |
418 |     if strcmp(proto.as_mut_ptr(), ux_proto) != 0 as libc::c_int
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:419:12
    |
419 |         || strlen(name.as_mut_ptr())
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:421:12
    |
421 |         || strlen(name.as_mut_ptr()) == 0 as libc::c_int as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:423:9
    |
423 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:423:10
    |
423 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:426:8
    |
426 |     if strlen(name.as_mut_ptr()) >= capacity {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:427:9
    |
427 |         *__errno_location() = 36 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:427:10
    |
427 |         *__errno_location() = 36 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:430:5
    |
430 |     strcpy(ux_name, name.as_mut_ptr());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `addr_parse_ux_uxf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:439:12
    |
439 |       return addr_parse_ux_uxf(
    |  ____________^
440 | |         b"ux\0" as *const u8 as *const libc::c_char,
441 | |         ux_addr_s,
442 | |         ux_name,
443 | |         capacity,
444 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:434:1
    |
434 | / pub unsafe extern "C" fn xcm_addr_parse_ux(
435 | |     mut ux_addr_s: *const libc::c_char,
436 | |     mut ux_name: *mut libc::c_char,
437 | |     mut capacity: size_t,
438 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `addr_parse_ux_uxf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:452:12
    |
452 |       return addr_parse_ux_uxf(
    |  ____________^
453 | |         b"uxf\0" as *const u8 as *const libc::c_char,
454 | |         uxf_addr_s,
455 | |         uxf_name,
456 | |         capacity,
457 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:447:1
    |
447 | / pub unsafe extern "C" fn xcm_addr_parse_uxf(
448 | |     mut uxf_addr_s: *const libc::c_char,
449 | |     mut uxf_name: *mut libc::c_char,
450 | |     mut capacity: size_t,
451 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:465:10
    |
465 |     if !(strlen(host_s) == 0 as libc::c_int as libc::c_ulong) {
    |          ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:459:1
    |
459 | / unsafe extern "C" fn host_parse(
460 | |     mut host_s: *const libc::c_char,
461 | |     mut host: *mut xcm_addr_host,
462 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:466:12
    |
466 |         if *host_s.offset(0 as libc::c_int as isize) as libc::c_int == '[' as i32 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:466:13
    |
466 |         if *host_s.offset(0 as libc::c_int as isize) as libc::c_int == '[' as i32 {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:467:18
    |
467 |             if !(strlen(host_s) < (1 as libc::c_int + 1 as libc::c_int) as libc::c_ulong
    |                  ^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:468:20
    |
468 |                   || *host_s
    |  ____________________^
469 | |                     .offset(
470 | |                         (strlen(host_s)).wrapping_sub(1 as libc::c_int as libc::c_ulong)
471 | |                             as isize,
472 | |                     ) as libc::c_int != ']' as i32)
    | |_____________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:468:21
    |
468 |                   || *host_s
    |  _____________________^
469 | |                     .offset(
470 | |                         (strlen(host_s)).wrapping_sub(1 as libc::c_int as libc::c_ulong)
471 | |                             as isize,
472 | |                     ) as libc::c_int != ']' as i32)
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:470:25
    |
470 |                         (strlen(host_s)).wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:474:41
    |
474 |                 let ip6_s_len: size_t = (strlen(host_s))
    |                                         ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strncpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:480:17
    |
480 | /                 strncpy(
481 | |                     ip6_s.as_mut_ptr(),
482 | |                     host_s.offset(1 as libc::c_int as isize),
483 | |                     ip6_s_len,
484 | |                 );
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:482:21
    |
482 |                     host_s.offset(1 as libc::c_int as isize),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:485:17
    |
485 | /                 *ip6_s
486 | |                     .as_mut_ptr()
487 | |                     .offset(ip6_s_len as isize) = '\0' as i32 as libc::c_char;
    | |_______________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:485:18
    |
485 |                   *ip6_s
    |  __________________^
486 | |                     .as_mut_ptr()
487 | |                     .offset(ip6_s_len as isize) = '\0' as i32 as libc::c_char;
    | |_______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:493:20
    |
493 |                 if strcmp(ip6_s.as_mut_ptr(), b"*\0" as *const u8 as *const libc::c_char)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:496:21
    |
496 | /                     memcpy(
497 | |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
498 | |                             as *mut libc::c_void,
499 | |                         (in6addr_any.__in6_u.__u6_addr8).as_ptr() as *const libc::c_void,
500 | |                         16 as libc::c_int as libc::c_ulong,
501 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:497:25
    |
497 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:497:26
    |
497 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:497:26
    |
497 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                          ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:499:25
    |
499 |                         (in6addr_any.__in6_u.__u6_addr8).as_ptr() as *const libc::c_void,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: use of extern static is unsafe and requires unsafe block
   --> src/xcm_addr.rs:499:26
    |
499 |                         (in6addr_any.__in6_u.__u6_addr8).as_ptr() as *const libc::c_void,
    |                          ^^^^^^^^^^^ use of extern static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `inet_pton` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:503:27
    |
503 |                   } else if inet_pton(
    |  ___________________________^
504 | |                     10 as libc::c_int,
505 | |                     ip6_s.as_mut_ptr(),
506 | |                     &mut addr as *mut in6_addr as *mut libc::c_void,
507 | |                 ) == 1 as libc::c_int
    | |_________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:509:21
    |
509 | /                     memcpy(
510 | |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
511 | |                             as *mut libc::c_void,
512 | |                         (addr.__in6_u.__u6_addr8).as_mut_ptr() as *const libc::c_void,
513 | |                         16 as libc::c_int as libc::c_ulong,
514 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:510:25
    |
510 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:510:26
    |
510 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:510:26
    |
510 |                         ((*host).c2rust_unnamed.ip.addr.ip6).as_mut_ptr()
    |                          ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:512:25
    |
512 |                         (addr.__in6_u.__u6_addr8).as_mut_ptr() as *const libc::c_void,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:522:25
    |
522 |                         (*host).type_0 = xcm_addr_type_ip;
    |                         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:523:25
    |
523 |                         (*host)
    |                         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:532:16
    |
532 |             if strcmp(host_s, b"*\0" as *const u8 as *const libc::c_char)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:535:17
    |
535 |                 (*host).type_0 = xcm_addr_type_ip;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:536:17
    |
536 |                 (*host).c2rust_unnamed.ip.family = 2 as libc::c_int as sa_family_t;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:537:17
    |
537 |                 (*host).c2rust_unnamed.ip.addr.ip4 = 0 as libc::c_int as in_addr_t;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `inet_pton` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:541:16
    |
541 |               if inet_pton(
    |  ________________^
542 | |                 2 as libc::c_int,
543 | |                 host_s,
544 | |                 &mut addr_0 as *mut in_addr as *mut libc::c_void,
545 | |             ) == 1 as libc::c_int
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:547:17
    |
547 |                 (*host).type_0 = xcm_addr_type_ip;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:548:17
    |
548 |                 (*host).c2rust_unnamed.ip.family = 2 as libc::c_int as sa_family_t;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:549:17
    |
549 |                 (*host).c2rust_unnamed.ip.addr.ip4 = addr_0.s_addr;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `xcm_dns_is_valid_name` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:552:16
    |
552 |             if xcm_dns_is_valid_name(host_s) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:553:17
    |
553 |                 (*host).type_0 = xcm_addr_type_name;
    |                 ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:554:17
    |
554 |                 strcpy(((*host).c2rust_unnamed.name).as_mut_ptr(), host_s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:554:24
    |
554 |                 strcpy(((*host).c2rust_unnamed.name).as_mut_ptr(), host_s);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:554:25
    |
554 |                 strcpy(((*host).c2rust_unnamed.name).as_mut_ptr(), host_s);
    |                         ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:559:5
    |
559 |     *__errno_location() = 22 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:559:6
    |
559 |     *__errno_location() = 22 as libc::c_int;
    |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `proto_addr_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:577:10
    |
577 |       if !(proto_addr_parse(
    |  __________^
578 | |         addr_s,
579 | |         actual_proto.as_mut_ptr(),
580 | |         ::core::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong,
581 | |         paddr.as_mut_ptr(),
582 | |         ::core::mem::size_of::<[libc::c_char; 579]>() as libc::c_ulong,
583 | |     ) < 0 as libc::c_int)
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:562:1
    |
562 | / unsafe extern "C" fn host_port_parse(
563 | |     mut proto: *const libc::c_char,
564 | |     mut addr_s: *const libc::c_char,
565 | |     mut host: *mut xcm_addr_host,
566 | |     mut port: *mut uint16_t,
567 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:585:12
    |
585 |         if strcmp(proto, actual_proto.as_mut_ptr()) != 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strrchr` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:588:24
    |
588 |             port_sep = strrchr(paddr.as_mut_ptr(), ':' as i32);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:592:30
    |
592 |                 port_start = port_sep.offset(1 as libc::c_int as isize);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strtol` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:594:25
    |
594 |                 lport = strtol(port_start, &mut end, 10 as libc::c_int) as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:595:20
    |
595 |                 if *end.offset(0 as libc::c_int as isize) as libc::c_int != '\0' as i32 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:595:21
    |
595 |                 if *end.offset(0 as libc::c_int as isize) as libc::c_int != '\0' as i32 {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::offset_from` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:601:32
    |
601 |                     host_len = port_sep.offset_from(paddr.as_mut_ptr()) as libc::c_long
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:608:25
    |
608 | /                         *host_start
609 | |                             .offset(host_len as isize) = '\0' as i32 as libc::c_char;
    | |______________________________________________________^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:608:26
    |
608 |                           *host_start
    |  __________________________^
609 | |                             .offset(host_len as isize) = '\0' as i32 as libc::c_char;
    | |______________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `host_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:610:28
    |
610 |                         if host_parse(host_start, host) < 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:613:29
    |
613 | ...                   *port = ntohs(lport as uint16_t);
    |                       ^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ntohs` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:613:37
    |
613 | ...                   *port = ntohs(lport as uint16_t);
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:623:17
    |
623 |                 *__errno_location() = 22 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:623:18
    |
623 |                 *__errno_location() = 22 as libc::c_int;
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:635:12
    |
635 |       return host_port_parse(
    |  ____________^
636 | |         b"utls\0" as *const u8 as *const libc::c_char,
637 | |         utls_addr_s,
638 | |         host,
639 | |         port,
640 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:630:1
    |
630 | / pub unsafe extern "C" fn xcm_addr_parse_utls(
631 | |     mut utls_addr_s: *const libc::c_char,
632 | |     mut host: *mut xcm_addr_host,
633 | |     mut port: *mut uint16_t,
634 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:648:12
    |
648 |       return host_port_parse(
    |  ____________^
649 | |         b"tls\0" as *const u8 as *const libc::c_char,
650 | |         tls_addr_s,
651 | |         host,
652 | |         port,
653 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:643:1
    |
643 | / pub unsafe extern "C" fn xcm_addr_parse_tls(
644 | |     mut tls_addr_s: *const libc::c_char,
645 | |     mut host: *mut xcm_addr_host,
646 | |     mut port: *mut uint16_t,
647 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:661:12
    |
661 |       return host_port_parse(
    |  ____________^
662 | |         b"tcp\0" as *const u8 as *const libc::c_char,
663 | |         tcp_addr_s,
664 | |         host,
665 | |         port,
666 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:656:1
    |
656 | / pub unsafe extern "C" fn xcm_addr_parse_tcp(
657 | |     mut tcp_addr_s: *const libc::c_char,
658 | |     mut host: *mut xcm_addr_host,
659 | |     mut port: *mut uint16_t,
660 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:674:12
    |
674 |       return host_port_parse(
    |  ____________^
675 | |         b"sctp\0" as *const u8 as *const libc::c_char,
676 | |         sctp_addr_s,
677 | |         host,
678 | |         port,
679 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:669:1
    |
669 | / pub unsafe extern "C" fn xcm_addr_parse_sctp(
670 | |     mut sctp_addr_s: *const libc::c_char,
671 | |     mut host: *mut xcm_addr_host,
672 | |     mut port: *mut uint16_t,
673 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:687:12
    |
687 |       return host_port_parse(
    |  ____________^
688 | |         b"btcp\0" as *const u8 as *const libc::c_char,
689 | |         btcp_addr_s,
690 | |         host,
691 | |         port,
692 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:682:1
    |
682 | / pub unsafe extern "C" fn xcm_addr_parse_btcp(
683 | |     mut btcp_addr_s: *const libc::c_char,
684 | |     mut host: *mut xcm_addr_host,
685 | |     mut port: *mut uint16_t,
686 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_parse` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:700:12
    |
700 |       return host_port_parse(
    |  ____________^
701 | |         b"btls\0" as *const u8 as *const libc::c_char,
702 | |         btls_addr_s,
703 | |         host,
704 | |         port,
705 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:695:1
    |
695 | / pub unsafe extern "C" fn xcm_addr_parse_btls(
696 | |     mut btls_addr_s: *const libc::c_char,
697 | |     mut host: *mut xcm_addr_host,
698 | |     mut port: *mut uint16_t,
699 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:714:31
    |
714 |       let mut rc: libc::c_int = snprintf(
    |  _______________________________^
715 | |         addr_s,
716 | |         capacity,
717 | |         b"%s%c%s%c%d\0" as *const u8 as *const libc::c_char,
...   |
722 | |         ntohs(port) as libc::c_int,
723 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:707:1
    |
707 | / unsafe extern "C" fn name_port_make(
708 | |     mut proto: *const libc::c_char,
709 | |     mut domain_name: *const libc::c_char,
710 | |     mut port: uint16_t,
711 | |     mut addr_s: *mut libc::c_char,
712 | |     mut capacity: size_t,
713 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `ntohs` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:722:9
    |
722 |         ntohs(port) as libc::c_int,
    |         ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:725:9
    |
725 |         *__errno_location() = 36 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:725:10
    |
725 |         *__errno_location() = 36 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `inet_ntop` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:738:8
    |
738 |       if (inet_ntop(
    |  ________^
739 | |         (*ip).family as libc::c_int,
740 | |         &(*ip).addr.ip4 as *const in_addr_t as *const libc::c_void,
741 | |         ip_s.as_mut_ptr(),
742 | |         ::core::mem::size_of::<[libc::c_char; 46]>() as libc::c_ulong as socklen_t,
743 | |     ))
    | |______^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:730:1
    |
730 | / unsafe extern "C" fn ip_port_make(
731 | |     mut proto: *const libc::c_char,
732 | |     mut ip: *const xcm_addr_ip,
733 | |     mut port: uint16_t,
734 | |     mut addr_s: *mut libc::c_char,
735 | |     mut capacity: size_t,
736 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:739:9
    |
739 |         (*ip).family as libc::c_int,
    |         ^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:740:10
    |
740 |         &(*ip).addr.ip4 as *const in_addr_t as *const libc::c_void,
    |          ^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:740:10
    |
740 |         &(*ip).addr.ip4 as *const in_addr_t as *const libc::c_void,
    |          ^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:746:12
    |
746 |         if *__errno_location() == 28 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:746:13
    |
746 |         if *__errno_location() == 28 as libc::c_int {
    |             ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:747:13
    |
747 |             *__errno_location() = 36 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:747:14
    |
747 |             *__errno_location() = 36 as libc::c_int;
    |              ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:752:8
    |
752 |     if (*ip).family as libc::c_int == 2 as libc::c_int {
    |        ^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:753:14
    |
753 |           rc = snprintf(
    |  ______________^
754 | |             addr_s,
755 | |             capacity,
756 | |             b"%s%c%s%c%d\0" as *const u8 as *const libc::c_char,
...   |
761 | |             ntohs(port) as libc::c_int,
762 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ntohs` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:761:13
    |
761 |             ntohs(port) as libc::c_int,
    |             ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:764:14
    |
764 |           rc = snprintf(
    |  ______________^
765 | |             addr_s,
766 | |             capacity,
767 | |             b"%s%c%c%s%c%c%d\0" as *const u8 as *const libc::c_char,
...   |
774 | |             ntohs(port) as libc::c_int,
775 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ntohs` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:774:13
    |
774 |             ntohs(port) as libc::c_int,
    |             ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:778:9
    |
778 |         *__errno_location() = 36 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:778:10
    |
778 |         *__errno_location() = 36 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:790:11
    |
790 |     match (*host).type_0 as libc::c_uint {
    |           ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:783:1
    |
783 | / unsafe extern "C" fn host_port_make(
784 | |     mut proto: *const libc::c_char,
785 | |     mut host: *const xcm_addr_host,
786 | |     mut port: uint16_t,
787 | |     mut addr_s: *mut libc::c_char,
788 | |     mut capacity: size_t,
789 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `name_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:792:20
    |
792 |               return name_port_make(
    |  ____________________^
793 | |                 proto,
794 | |                 ((*host).c2rust_unnamed.name).as_ptr(),
795 | |                 port,
796 | |                 addr_s,
797 | |                 capacity,
798 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:794:17
    |
794 |                 ((*host).c2rust_unnamed.name).as_ptr(),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:794:18
    |
794 |                 ((*host).c2rust_unnamed.name).as_ptr(),
    |                  ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ip_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:801:20
    |
801 |               return ip_port_make(
    |  ____________________^
802 | |                 proto,
803 | |                 &(*host).c2rust_unnamed.ip,
804 | |                 port,
805 | |                 addr_s,
806 | |                 capacity,
807 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: access to union field is unsafe and requires unsafe block
   --> src/xcm_addr.rs:803:18
    |
803 |                 &(*host).c2rust_unnamed.ip,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ access to union field
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:803:18
    |
803 |                 &(*host).c2rust_unnamed.ip,
    |                  ^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:811:17
    |
811 |                 log_console_conf(1 as libc::c_int != 0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:812:20
    |
812 |                 if log_is_enabled(log_type_error) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:813:21
    |
813 | /                     __log_event(
814 | |                         log_type_error,
815 | |                         b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/core/xcm_addr.c\0"
816 | |                             as *const u8 as *const libc::c_char,
...   |
826 | |                         b"0\0" as *const u8 as *const libc::c_char,
827 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:818:27
    |
818 |                           (*::core::mem::transmute::<
    |  ___________________________^
819 | |                             &[u8; 15],
820 | |                             &[libc::c_char; 15],
821 | |                         >(b"host_port_make\0"))
    | |______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:829:17
    |
829 |                 abort();
    |                 ^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:842:12
    |
842 |       return host_port_make(
    |  ____________^
843 | |         b"utls\0" as *const u8 as *const libc::c_char,
844 | |         host,
845 | |         port,
846 | |         utls_addr_s,
847 | |         capacity,
848 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:836:1
    |
836 | / pub unsafe extern "C" fn xcm_addr_make_utls(
837 | |     mut host: *const xcm_addr_host,
838 | |     mut port: uint16_t,
839 | |     mut utls_addr_s: *mut libc::c_char,
840 | |     mut capacity: size_t,
841 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:857:12
    |
857 |       return host_port_make(
    |  ____________^
858 | |         b"tls\0" as *const u8 as *const libc::c_char,
859 | |         host,
860 | |         port,
861 | |         tls_addr_s,
862 | |         capacity,
863 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:851:1
    |
851 | / pub unsafe extern "C" fn xcm_addr_make_tls(
852 | |     mut host: *const xcm_addr_host,
853 | |     mut port: uint16_t,
854 | |     mut tls_addr_s: *mut libc::c_char,
855 | |     mut capacity: size_t,
856 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:872:12
    |
872 |       return host_port_make(
    |  ____________^
873 | |         b"tcp\0" as *const u8 as *const libc::c_char,
874 | |         host,
875 | |         port,
876 | |         tcp_addr_s,
877 | |         capacity,
878 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:866:1
    |
866 | / pub unsafe extern "C" fn xcm_addr_make_tcp(
867 | |     mut host: *const xcm_addr_host,
868 | |     mut port: uint16_t,
869 | |     mut tcp_addr_s: *mut libc::c_char,
870 | |     mut capacity: size_t,
871 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:887:12
    |
887 |       return host_port_make(
    |  ____________^
888 | |         b"sctp\0" as *const u8 as *const libc::c_char,
889 | |         host,
890 | |         port,
891 | |         sctp_addr_s,
892 | |         capacity,
893 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:881:1
    |
881 | / pub unsafe extern "C" fn xcm_addr_make_sctp(
882 | |     mut host: *const xcm_addr_host,
883 | |     mut port: uint16_t,
884 | |     mut sctp_addr_s: *mut libc::c_char,
885 | |     mut capacity: size_t,
886 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:901:8
    |
901 |     if strlen(ux_name) > (108 as libc::c_int - 1 as libc::c_int) as libc::c_ulong {
    |        ^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:895:1
    |
895 | / unsafe extern "C" fn addr_make_ux_uxf(
896 | |     mut ux_proto: *const libc::c_char,
897 | |     mut ux_name: *const libc::c_char,
898 | |     mut ux_addr_s: *mut libc::c_char,
899 | |     mut capacity: size_t,
900 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:902:9
    |
902 |         *__errno_location() = 22 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:902:10
    |
902 |         *__errno_location() = 22 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `snprintf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:905:31
    |
905 |       let mut rc: libc::c_int = snprintf(
    |  _______________________________^
906 | |         ux_addr_s,
907 | |         capacity,
908 | |         b"%s%c%s\0" as *const u8 as *const libc::c_char,
...   |
911 | |         ux_name,
912 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_addr.rs:914:9
    |
914 |         *__errno_location() = 36 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:914:10
    |
914 |         *__errno_location() = 36 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `addr_make_ux_uxf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:925:12
    |
925 |       return addr_make_ux_uxf(
    |  ____________^
926 | |         b"ux\0" as *const u8 as *const libc::c_char,
927 | |         ux_name,
928 | |         ux_addr_s,
929 | |         capacity,
930 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:920:1
    |
920 | / pub unsafe extern "C" fn xcm_addr_make_ux(
921 | |     mut ux_name: *const libc::c_char,
922 | |     mut ux_addr_s: *mut libc::c_char,
923 | |     mut capacity: size_t,
924 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `addr_make_ux_uxf` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:938:12
    |
938 |       return addr_make_ux_uxf(
    |  ____________^
939 | |         b"uxf\0" as *const u8 as *const libc::c_char,
940 | |         uxf_name,
941 | |         uxf_addr_s,
942 | |         capacity,
943 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:933:1
    |
933 | / pub unsafe extern "C" fn xcm_addr_make_uxf(
934 | |     mut uxf_name: *const libc::c_char,
935 | |     mut uxf_addr_s: *mut libc::c_char,
936 | |     mut capacity: size_t,
937 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:952:12
    |
952 |       return host_port_make(
    |  ____________^
953 | |         b"btcp\0" as *const u8 as *const libc::c_char,
954 | |         host,
955 | |         port,
956 | |         btcp_addr_s,
957 | |         capacity,
958 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:946:1
    |
946 | / pub unsafe extern "C" fn xcm_addr_make_btcp(
947 | |     mut host: *const xcm_addr_host,
948 | |     mut port: libc::c_ushort,
949 | |     mut btcp_addr_s: *mut libc::c_char,
950 | |     mut capacity: size_t,
951 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `host_port_make` is unsafe and requires unsafe block
   --> src/xcm_addr.rs:967:12
    |
967 |       return host_port_make(
    |  ____________^
968 | |         b"btls\0" as *const u8 as *const libc::c_char,
969 | |         host,
970 | |         port,
971 | |         btls_addr_s,
972 | |         capacity,
973 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_addr.rs:961:1
    |
961 | / pub unsafe extern "C" fn xcm_addr_make_btls(
962 | |     mut host: *const xcm_addr_host,
963 | |     mut port: libc::c_ushort,
964 | |     mut btls_addr_s: *mut libc::c_char,
965 | |     mut capacity: size_t,
966 | | ) -> libc::c_int {
    | |________________^

warning: path statement with no effect
   --> src/xcm_addr.rs:344:9
    |
344 |         i;
    |         ^^
    |
    = note: `#[warn(path_statements)]` on by default

For more information about this error, try `rustc --explain E0133`.
warning: `rs-xcm-addr` (lib) generated 169 warnings (run `cargo fix --lib -p rs-xcm-addr` to apply 29 suggestions)
    Finished `release` profile [optimized] target(s) in 0.03s
    Finished `release` profile [optimized] target(s) in 0.01s
warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:212:17
    |
212 |                 log_console_conf(1 as libc::c_int != 0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:204:1
    |
204 | / pub unsafe extern "C" fn xcm_tp_socket_type_name(
205 | |     mut socket_type: xcm_socket_type,
206 | | ) -> *const libc::c_char {
    | |________________________^
    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:213:20
    |
213 |                 if log_is_enabled(log_type_error) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:214:21
    |
214 | /                     __log_event(
215 | |                         log_type_error,
216 | |                         b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0"
217 | |                             as *const u8 as *const libc::c_char,
...   |
227 | |                         b"0\0" as *const u8 as *const libc::c_char,
228 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:219:27
    |
219 |                           (*::core::mem::transmute::<
    |  ___________________________^
220 | |                             &[u8; 24],
221 | |                             &[libc::c_char; 24],
222 | |                         >(b"xcm_tp_socket_type_name\0"))
    | |_______________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:230:17
    |
230 |                 abort();
    |                 ^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:289:33
    |
289 |       let mut priv_size: size_t = ((*(*proto).ops).priv_size)
    |  _________________________________^
290 | |         .expect("non-null function pointer")(type_0);
    | |____________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:281:1
    |
281 | / pub unsafe extern "C" fn xcm_tp_socket_create(
282 | |     mut proto: *const xcm_tp_proto,
283 | |     mut type_0: xcm_socket_type,
284 | |     mut xpoll: *mut xpoll,
...   |
287 | |     mut is_blocking: bool,
288 | | ) -> *mut xcm_socket {
    | |____________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:289:34
    |
289 |     let mut priv_size: size_t = ((*(*proto).ops).priv_size)
    |                                  ^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:289:36
    |
289 |     let mut priv_size: size_t = ((*(*proto).ops).priv_size)
    |                                    ^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_calloc` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:291:34
    |
291 |       let mut s: *mut xcm_socket = ut_calloc(
    |  __________________________________^
292 | |         (::core::mem::size_of::<xcm_socket>() as libc::c_ulong).wrapping_add(priv_size),
293 | |     ) as *mut xcm_socket;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:294:5
    |
294 |     (*s).proto = proto;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:295:5
    |
295 |     (*s).type_0 = type_0;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:296:5
    |
296 |     (*s).auto_enable_ctl = auto_enable_ctl;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:297:5
    |
297 |     (*s).auto_update = auto_update;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:298:5
    |
298 |     (*s).is_blocking = is_blocking;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:299:5
    |
299 |     (*s).xpoll = xpoll;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:300:5
    |
300 |     (*s).sock_id = get_next_sock_id();
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `get_next_sock_id` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:300:20
    |
300 |     (*s).sock_id = get_next_sock_id();
    |                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:301:5
    |
301 |     (*s).condition = 0 as libc::c_int;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:302:5
    |
302 |     (*s).ctl = 0 as *mut ctl;
    |     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_free` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:307:5
    |
307 |     ut_free(s as *mut libc::c_void);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:306:1
    |
306 | pub unsafe extern "C" fn xcm_tp_socket_destroy(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:314:12
    |
314 |     return ((*(*(*s).proto).ops).init).expect("non-null function pointer")(s, parent);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:310:1
    |
310 | / pub unsafe extern "C" fn xcm_tp_socket_init(
311 | |     mut s: *mut xcm_socket,
312 | |     mut parent: *mut xcm_socket,
313 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:314:13
    |
314 |     return ((*(*(*s).proto).ops).init).expect("non-null function pointer")(s, parent);
    |             ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:314:15
    |
314 |     return ((*(*(*s).proto).ops).init).expect("non-null function pointer")(s, parent);
    |               ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:314:17
    |
314 |     return ((*(*(*s).proto).ops).init).expect("non-null function pointer")(s, parent);
    |                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:317:10
    |
317 |     if !((*s).ctl).is_null() {
    |          ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:316:1
    |
316 | unsafe extern "C" fn do_ctl(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `ctl_process` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:318:9
    |
318 |         ctl_process((*s).ctl);
    |         ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:318:21
    |
318 |         ctl_process((*s).ctl);
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:326:9
    |
326 |     if ((*s).ctl).is_null() {
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:321:1
    |
321 | / unsafe extern "C" fn consider_ctl(
322 | |     mut s: *mut xcm_socket,
323 | |     mut permanently_failed_op: bool,
324 | |     mut temporarly_failed_op: bool,
325 | | ) {
    | |_^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:333:9
    |
333 |         (*s)
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:334:35
    |
334 |             .skipped_ctl_calls = ((*s).skipped_ctl_calls)
    |                                   ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:337:9
    |
337 |         (*s).skipped_ctl_calls = ((*s).skipped_ctl_calls).wrapping_add(1);
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:337:35
    |
337 |         (*s).skipped_ctl_calls = ((*s).skipped_ctl_calls).wrapping_add(1);
    |                                   ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:338:9
    |
338 |         (*s).skipped_ctl_calls;
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:340:8
    |
340 |     if (*s).skipped_ctl_calls > 256 as libc::c_int as uint64_t {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `do_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:341:9
    |
341 |         do_ctl(s);
    |         ^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:342:9
    |
342 |         (*s).skipped_ctl_calls = 0 as libc::c_int as uint64_t;
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:346:8
    |
346 |     if (*s).auto_update {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:345:1
    |
345 | unsafe extern "C" fn consider_auto_update(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `xcm_tp_socket_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:347:9
    |
347 |         xcm_tp_socket_update(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:351:8
    |
351 |     if (*s).auto_enable_ctl {
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:350:1
    |
350 | unsafe extern "C" fn consider_auto_enable_ctl(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `xcm_tp_socket_enable_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:352:9
    |
352 |         xcm_tp_socket_enable_ctl(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `do_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:360:5
    |
360 |     do_ctl(s);
    |     ^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:356:1
    |
356 | / pub unsafe extern "C" fn xcm_tp_socket_connect(
357 | |     mut s: *mut xcm_socket,
358 | |     mut remote_addr: *const libc::c_char,
359 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:361:31
    |
361 |       let mut rc: libc::c_int = ((*(*(*s).proto).ops).connect)
    |  _______________________________^
362 | |         .expect("non-null function pointer")(s, remote_addr);
    | |____________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:361:32
    |
361 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).connect)
    |                                ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:361:34
    |
361 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).connect)
    |                                  ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:361:36
    |
361 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).connect)
    |                                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_auto_enable_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:364:9
    |
364 |         consider_auto_enable_ctl(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:365:9
    |
365 |         consider_auto_update(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `do_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:374:5
    |
374 |     do_ctl(s);
    |     ^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:370:1
    |
370 | / pub unsafe extern "C" fn xcm_tp_socket_server(
371 | |     mut s: *mut xcm_socket,
372 | |     mut local_addr: *const libc::c_char,
373 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:375:31
    |
375 |       let mut rc: libc::c_int = ((*(*(*s).proto).ops).server)
    |  _______________________________^
376 | |         .expect("non-null function pointer")(s, local_addr);
    | |___________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:375:32
    |
375 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).server)
    |                                ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:375:34
    |
375 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).server)
    |                                  ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:375:36
    |
375 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).server)
    |                                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_auto_enable_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:378:9
    |
378 |         consider_auto_enable_ctl(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:379:9
    |
379 |         consider_auto_update(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ctl_destroy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:386:9
    |
386 |         ctl_destroy((*s).ctl, 1 as libc::c_int != 0);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:384:1
    |
384 | pub unsafe extern "C" fn xcm_tp_socket_close(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:386:21
    |
386 |         ctl_destroy((*s).ctl, 1 as libc::c_int != 0);
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:387:9
    |
387 |         ((*(*(*s).proto).ops).close).expect("non-null function pointer")(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:387:10
    |
387 |         ((*(*(*s).proto).ops).close).expect("non-null function pointer")(s);
    |          ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:387:12
    |
387 |         ((*(*(*s).proto).ops).close).expect("non-null function pointer")(s);
    |            ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:387:14
    |
387 |         ((*(*(*s).proto).ops).close).expect("non-null function pointer")(s);
    |              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ctl_destroy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:393:9
    |
393 |         ctl_destroy((*s).ctl, 0 as libc::c_int != 0);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:391:1
    |
391 | pub unsafe extern "C" fn xcm_tp_socket_cleanup(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:393:21
    |
393 |         ctl_destroy((*s).ctl, 0 as libc::c_int != 0);
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:394:9
    |
394 |         ((*(*(*s).proto).ops).cleanup).expect("non-null function pointer")(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:394:10
    |
394 |         ((*(*(*s).proto).ops).cleanup).expect("non-null function pointer")(s);
    |          ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:394:12
    |
394 |         ((*(*(*s).proto).ops).cleanup).expect("non-null function pointer")(s);
    |            ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:394:14
    |
394 |         ((*(*(*s).proto).ops).cleanup).expect("non-null function pointer")(s);
    |              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:402:31
    |
402 |       let mut rc: libc::c_int = ((*(*(*conn_s).proto).ops).accept)
    |  _______________________________^
403 | |         .expect("non-null function pointer")(conn_s, server_s);
    | |______________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:398:1
    |
398 | / pub unsafe extern "C" fn xcm_tp_socket_accept(
399 | |     mut conn_s: *mut xcm_socket,
400 | |     mut server_s: *mut xcm_socket,
401 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:402:32
    |
402 |     let mut rc: libc::c_int = ((*(*(*conn_s).proto).ops).accept)
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:402:34
    |
402 |     let mut rc: libc::c_int = ((*(*(*conn_s).proto).ops).accept)
    |                                  ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:402:36
    |
402 |     let mut rc: libc::c_int = ((*(*(*conn_s).proto).ops).accept)
    |                                    ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_auto_enable_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:405:9
    |
405 |         consider_auto_enable_ctl(conn_s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:406:9
    |
406 |         consider_auto_update(conn_s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:408:5
    |
408 | /     consider_ctl(
409 | |         server_s,
410 | |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
411 | |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
412 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:410:34
    |
410 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:410:35
    |
410 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:411:34
    |
411 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:411:35
    |
411 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:413:5
    |
413 |     xcm_tp_socket_update(server_s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:422:31
    |
422 |       let mut rc: libc::c_int = ((*(*(*s).proto).ops).send)
    |  _______________________________^
423 | |         .expect("non-null function pointer")(s, buf, len);
    | |_________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:417:1
    |
417 | / pub unsafe extern "C" fn xcm_tp_socket_send(
418 | |     mut s: *mut xcm_socket,
419 | |     mut buf: *const libc::c_void,
420 | |     mut len: size_t,
421 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:422:32
    |
422 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).send)
    |                                ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:422:34
    |
422 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).send)
    |                                  ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:422:36
    |
422 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).send)
    |                                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:424:5
    |
424 | /     consider_ctl(
425 | |         s,
426 | |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
427 | |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
428 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:426:34
    |
426 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:426:35
    |
426 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:427:34
    |
427 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:427:35
    |
427 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:429:5
    |
429 |     consider_auto_update(s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:438:31
    |
438 |       let mut rc: libc::c_int = ((*(*(*s).proto).ops).receive)
    |  _______________________________^
439 | |         .expect("non-null function pointer")(s, buf, capacity);
    | |______________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:433:1
    |
433 | / pub unsafe extern "C" fn xcm_tp_socket_receive(
434 | |     mut s: *mut xcm_socket,
435 | |     mut buf: *mut libc::c_void,
436 | |     mut capacity: size_t,
437 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:438:32
    |
438 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).receive)
    |                                ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:438:34
    |
438 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).receive)
    |                                  ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:438:36
    |
438 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).receive)
    |                                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:440:5
    |
440 | /     consider_ctl(
441 | |         s,
442 | |         rc == 0 as libc::c_int
443 | |             || rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
444 | |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
445 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:443:41
    |
443 |             || rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:443:42
    |
443 |             || rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:444:34
    |
444 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:444:35
    |
444 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:446:5
    |
446 |     consider_auto_update(s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:451:5
    |
451 |     ((*(*(*s).proto).ops).update).expect("non-null function pointer")(s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:450:1
    |
450 | pub unsafe extern "C" fn xcm_tp_socket_update(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:451:6
    |
451 |     ((*(*(*s).proto).ops).update).expect("non-null function pointer")(s);
    |      ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:451:8
    |
451 |     ((*(*(*s).proto).ops).update).expect("non-null function pointer")(s);
    |        ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:451:10
    |
451 |     ((*(*(*s).proto).ops).update).expect("non-null function pointer")(s);
    |          ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:455:31
    |
455 |       let mut rc: libc::c_int = ((*(*(*s).proto).ops).finish)
    |  _______________________________^
456 | |         .expect("non-null function pointer")(s);
    | |_______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:454:1
    |
454 | pub unsafe extern "C" fn xcm_tp_socket_finish(mut s: *mut xcm_socket) -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:455:32
    |
455 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).finish)
    |                                ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:455:34
    |
455 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).finish)
    |                                  ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:455:36
    |
455 |     let mut rc: libc::c_int = ((*(*(*s).proto).ops).finish)
    |                                    ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `consider_ctl` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:457:5
    |
457 | /     consider_ctl(
458 | |         s,
459 | |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
460 | |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
461 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:459:34
    |
459 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:459:35
    |
459 |         rc < 0 as libc::c_int && *__errno_location() != 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:460:34
    |
460 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                  ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:460:35
    |
460 |         rc < 0 as libc::c_int && *__errno_location() == 11 as libc::c_int,
    |                                   ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `consider_auto_update` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:462:5
    |
462 |     consider_auto_update(s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:469:9
    |
469 |     if ((*(*(*s).proto).ops).get_transport).is_some() {
    |         ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:466:1
    |
466 | / pub unsafe extern "C" fn xcm_tp_socket_get_transport(
467 | |     mut s: *mut xcm_socket,
468 | | ) -> *const libc::c_char {
    | |________________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:469:11
    |
469 |     if ((*(*(*s).proto).ops).get_transport).is_some() {
    |           ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:469:13
    |
469 |     if ((*(*(*s).proto).ops).get_transport).is_some() {
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:470:16
    |
470 |           return ((*(*(*s).proto).ops).get_transport)
    |  ________________^
471 | |             .expect("non-null function pointer")(s)
    | |___________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:470:17
    |
470 |         return ((*(*(*s).proto).ops).get_transport)
    |                 ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:470:19
    |
470 |         return ((*(*(*s).proto).ops).get_transport)
    |                   ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:470:21
    |
470 |         return ((*(*(*s).proto).ops).get_transport)
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:473:17
    |
473 |         return ((*(*s).proto).name).as_ptr()
    |                 ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:473:19
    |
473 |         return ((*(*s).proto).name).as_ptr()
    |                   ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:478:13
    |
478 |     return ((*(*(*s).proto).ops).max_msg).is_none();
    |             ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:477:1
    |
477 | pub unsafe extern "C" fn xcm_tp_socket_is_bytestream(mut s: *mut xcm_socket) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:478:15
    |
478 |     return ((*(*(*s).proto).ops).max_msg).is_none();
    |               ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:478:17
    |
478 |     return ((*(*(*s).proto).ops).max_msg).is_none();
    |                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:485:12
    |
485 |       return ((*(*(*conn_s).proto).ops).get_remote_addr)
    |  ____________^
486 | |         .expect("non-null function pointer")(conn_s, suppress_tracing);
    | |______________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:481:1
    |
481 | / pub unsafe extern "C" fn xcm_tp_socket_get_remote_addr(
482 | |     mut conn_s: *mut xcm_socket,
483 | |     mut suppress_tracing: bool,
484 | | ) -> *const libc::c_char {
    | |________________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:485:13
    |
485 |     return ((*(*(*conn_s).proto).ops).get_remote_addr)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:485:15
    |
485 |     return ((*(*(*conn_s).proto).ops).get_remote_addr)
    |               ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:485:17
    |
485 |     return ((*(*(*conn_s).proto).ops).get_remote_addr)
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:493:9
    |
493 |     if ((*(*(*s).proto).ops).set_local_addr).is_some() {
    |         ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:489:1
    |
489 | / pub unsafe extern "C" fn xcm_tp_socket_set_local_addr(
490 | |     mut s: *mut xcm_socket,
491 | |     mut local_addr: *const libc::c_char,
492 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:493:11
    |
493 |     if ((*(*(*s).proto).ops).set_local_addr).is_some() {
    |           ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:493:13
    |
493 |     if ((*(*(*s).proto).ops).set_local_addr).is_some() {
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:494:16
    |
494 |           return ((*(*(*s).proto).ops).set_local_addr)
    |  ________________^
495 | |             .expect("non-null function pointer")(s, local_addr)
    | |_______________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:494:17
    |
494 |         return ((*(*(*s).proto).ops).set_local_addr)
    |                 ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:494:19
    |
494 |         return ((*(*(*s).proto).ops).set_local_addr)
    |                   ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:494:21
    |
494 |         return ((*(*(*s).proto).ops).set_local_addr)
    |                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:497:9
    |
497 |         *__errno_location() = 13 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:497:10
    |
497 |         *__errno_location() = 13 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:506:12
    |
506 |       return ((*(*(*s).proto).ops).get_local_addr)
    |  ____________^
507 | |         .expect("non-null function pointer")(s, suppress_tracing);
    | |_________________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:502:1
    |
502 | / pub unsafe extern "C" fn xcm_tp_socket_get_local_addr(
503 | |     mut s: *mut xcm_socket,
504 | |     mut suppress_tracing: bool,
505 | | ) -> *const libc::c_char {
    | |________________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:506:13
    |
506 |     return ((*(*(*s).proto).ops).get_local_addr)
    |             ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:506:15
    |
506 |     return ((*(*(*s).proto).ops).get_local_addr)
    |               ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:506:17
    |
506 |     return ((*(*(*s).proto).ops).get_local_addr)
    |                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:511:12
    |
511 |       return ((*(*(*conn_s).proto).ops).max_msg)
    |  ____________^
512 | |         .expect("non-null function pointer")(conn_s);
    | |____________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:510:1
    |
510 | pub unsafe extern "C" fn xcm_tp_socket_max_msg(mut conn_s: *mut xcm_socket) -> size_t {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:511:13
    |
511 |     return ((*(*(*conn_s).proto).ops).max_msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:511:15
    |
511 |     return ((*(*(*conn_s).proto).ops).max_msg)
    |               ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:511:17
    |
511 |     return ((*(*(*conn_s).proto).ops).max_msg)
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:519:12
    |
519 |       return ((*(*(*conn_s).proto).ops).get_cnt)
    |  ____________^
520 | |         .expect("non-null function pointer")(conn_s, cnt);
    | |_________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:515:1
    |
515 | / pub unsafe extern "C" fn xcm_tp_socket_get_cnt(
516 | |     mut conn_s: *mut xcm_socket,
517 | |     mut cnt: xcm_tp_cnt,
518 | | ) -> int64_t {
    | |____________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:519:13
    |
519 |     return ((*(*(*conn_s).proto).ops).get_cnt)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:519:15
    |
519 |     return ((*(*(*conn_s).proto).ops).get_cnt)
    |               ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:519:17
    |
519 |     return ((*(*(*conn_s).proto).ops).get_cnt)
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:524:9
    |
524 |     if ((*(*(*s).proto).ops).enable_ctl).is_some() {
    |         ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:523:1
    |
523 | pub unsafe extern "C" fn xcm_tp_socket_enable_ctl(mut s: *mut xcm_socket) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:524:11
    |
524 |     if ((*(*(*s).proto).ops).enable_ctl).is_some() {
    |           ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:524:13
    |
524 |     if ((*(*(*s).proto).ops).enable_ctl).is_some() {
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:525:9
    |
525 |         ((*(*(*s).proto).ops).enable_ctl).expect("non-null function pointer")(s);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:525:10
    |
525 |         ((*(*(*s).proto).ops).enable_ctl).expect("non-null function pointer")(s);
    |          ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:525:12
    |
525 |         ((*(*(*s).proto).ops).enable_ctl).expect("non-null function pointer")(s);
    |            ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:525:14
    |
525 |         ((*(*(*s).proto).ops).enable_ctl).expect("non-null function pointer")(s);
    |              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:527:9
    |
527 |         (*s).ctl = ctl_create(s);
    |         ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ctl_create` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:527:20
    |
527 |         (*s).ctl = ctl_create(s);
    |                    ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:535:9
    |
535 |     if ((*(*(*s).proto).ops).attr_populate).is_some() {
    |         ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:531:1
    |
531 | / pub unsafe extern "C" fn xcm_tp_socket_attr_populate(
532 | |     mut s: *mut xcm_socket,
533 | |     mut attr_tree: *mut attr_tree,
534 | | ) {
    | |_^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:535:11
    |
535 |     if ((*(*(*s).proto).ops).attr_populate).is_some() {
    |           ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:535:13
    |
535 |     if ((*(*(*s).proto).ops).attr_populate).is_some() {
    |             ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:536:9
    |
536 | /         ((*(*(*s).proto).ops).attr_populate)
537 | |             .expect("non-null function pointer")(s, attr_tree);
    | |______________________________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:536:10
    |
536 |         ((*(*(*s).proto).ops).attr_populate)
    |          ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:536:12
    |
536 |         ((*(*(*s).proto).ops).attr_populate)
    |            ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:536:14
    |
536 |         ((*(*(*s).proto).ops).attr_populate)
    |              ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:546:27
    |
546 |     let mut len: size_t = strlen(value);
    |                           ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:541:1
    |
541 | / pub unsafe extern "C" fn xcm_tp_get_str_attr(
542 | |     mut value: *const libc::c_char,
543 | |     mut buf: *mut libc::c_void,
544 | |     mut capacity: size_t,
545 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:548:9
    |
548 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:548:10
    |
548 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:551:5
    |
551 |     strcpy(buf as *mut libc::c_char, value);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `len`
   --> src/xcm_tp.rs:557:9
    |
557 |     mut len: size_t,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`
    |
    = note: `#[warn(unused_variables)]` on by default

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:560:5
    |
560 | /     memcpy(
561 | |         value as *mut libc::c_void,
562 | |         buf,
563 | |         ::core::mem::size_of::<bool>() as libc::c_ulong,
564 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:555:1
    |
555 | / pub unsafe extern "C" fn xcm_tp_set_bool_attr(
556 | |     mut buf: *const libc::c_void,
557 | |     mut len: size_t,
558 | |     mut value: *mut bool,
559 | | ) {
    | |_^

warning: unused variable: `capacity`
   --> src/xcm_tp.rs:570:9
    |
570 |     mut capacity: size_t,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_capacity`

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:572:5
    |
572 | /     memcpy(
573 | |         buf,
574 | |         &mut value as *mut bool as *const libc::c_void,
575 | |         ::core::mem::size_of::<bool>() as libc::c_ulong,
576 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:567:1
    |
567 | / pub unsafe extern "C" fn xcm_tp_get_bool_attr(
568 | |     mut value: bool,
569 | |     mut buf: *mut libc::c_void,
570 | |     mut capacity: size_t,
571 | | ) -> libc::c_int {
    | |________________^

warning: unused variable: `len`
   --> src/xcm_tp.rs:582:9
    |
582 |     mut len: size_t,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:585:5
    |
585 | /     memcpy(
586 | |         value as *mut libc::c_void,
587 | |         buf,
588 | |         ::core::mem::size_of::<libc::c_double>() as libc::c_ulong,
589 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:580:1
    |
580 | / pub unsafe extern "C" fn xcm_tp_set_double_attr(
581 | |     mut buf: *const libc::c_void,
582 | |     mut len: size_t,
583 | |     mut value: *mut libc::c_double,
584 | | ) {
    | |_^

warning: unused variable: `capacity`
   --> src/xcm_tp.rs:595:9
    |
595 |     mut capacity: size_t,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_capacity`

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:597:5
    |
597 | /     memcpy(
598 | |         buf,
599 | |         &mut value as *mut libc::c_double as *const libc::c_void,
600 | |         ::core::mem::size_of::<libc::c_double>() as libc::c_ulong,
601 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:592:1
    |
592 | / pub unsafe extern "C" fn xcm_tp_get_double_attr(
593 | |     mut value: libc::c_double,
594 | |     mut buf: *mut libc::c_void,
595 | |     mut capacity: size_t,
596 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:612:9
    |
612 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:605:1
    |
605 | / pub unsafe extern "C" fn xcm_tp_get_bin_attr(
606 | |     mut value: *const libc::c_char,
607 | |     mut len: size_t,
608 | |     mut buf: *mut libc::c_void,
609 | |     mut capacity: size_t,
610 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:612:10
    |
612 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:615:5
    |
615 |     memcpy(buf, value as *const libc::c_void, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:620:9
    |
620 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `xcm_tp_get_str_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:624:12
    |
624 |     return xcm_tp_get_str_attr(xcm_tp_socket_type_name((*s).type_0), value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:618:1
    |
618 | / unsafe extern "C" fn get_type_attr(
619 | |     mut s: *mut xcm_socket,
620 | |     mut context: *mut libc::c_void,
621 | |     mut value: *mut libc::c_void,
622 | |     mut capacity: size_t,
623 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_tp_socket_type_name` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:624:32
    |
624 |     return xcm_tp_get_str_attr(xcm_tp_socket_type_name((*s).type_0), value, capacity);
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:624:56
    |
624 |     return xcm_tp_get_str_attr(xcm_tp_socket_type_name((*s).type_0), value, capacity);
    |                                                        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:628:9
    |
628 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `xcm_tp_get_str_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:632:12
    |
632 |     return xcm_tp_get_str_attr(xcm_tp_socket_get_transport(s), value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:626:1
    |
626 | / unsafe extern "C" fn get_transport_attr(
627 | |     mut s: *mut xcm_socket,
628 | |     mut context: *mut libc::c_void,
629 | |     mut value: *mut libc::c_void,
630 | |     mut capacity: size_t,
631 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_tp_socket_get_transport` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:632:32
    |
632 |     return xcm_tp_get_str_attr(xcm_tp_socket_get_transport(s), value, capacity);
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:636:9
    |
636 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `len`
   --> src/xcm_tp.rs:638:9
    |
638 |     mut len: size_t,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:640:8
    |
640 |     if strcmp(value as *const libc::c_char, b"any\0" as *const u8 as *const libc::c_char)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:634:1
    |
634 | / unsafe extern "C" fn set_service_attr(
635 | |     mut s: *mut xcm_socket,
636 | |     mut context: *mut libc::c_void,
637 | |     mut value: *const libc::c_void,
638 | |     mut len: size_t,
639 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_tp_socket_is_bytestream` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:645:46
    |
645 |     let mut actual: *const libc::c_char = if xcm_tp_socket_is_bytestream(s)
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:652:8
    |
652 |     if strcmp(actual, value as *const libc::c_char) == 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:655:5
    |
655 |     *__errno_location() = 22 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:655:6
    |
655 |     *__errno_location() = 22 as libc::c_int;
    |      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:660:9
    |
660 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `xcm_tp_socket_is_bytestream` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:664:47
    |
664 |     let mut service: *const libc::c_char = if xcm_tp_socket_is_bytestream(s)
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:658:1
    |
658 | / unsafe extern "C" fn get_service_attr(
659 | |     mut s: *mut xcm_socket,
660 | |     mut context: *mut libc::c_void,
661 | |     mut value: *mut libc::c_void,
662 | |     mut capacity: size_t,
663 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_tp_get_str_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:671:12
    |
671 |     return xcm_tp_get_str_attr(service, value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:679:9
    |
679 |         *__errno_location() = 2 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:673:1
    |
673 | / unsafe extern "C" fn addr_to_attr(
674 | |     mut addr: *const libc::c_char,
675 | |     mut value: *mut libc::c_void,
676 | |     mut capacity: size_t,
677 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:679:10
    |
679 |         *__errno_location() = 2 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_get_str_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:682:12
    |
682 |     return xcm_tp_get_str_attr(addr, value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:686:9
    |
686 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `len`
   --> src/xcm_tp.rs:688:9
    |
688 |     mut len: size_t,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning[E0133]: call to unsafe function `xcm_tp_socket_set_local_addr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:690:12
    |
690 |     return xcm_tp_socket_set_local_addr(s, value as *const libc::c_char);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:684:1
    |
684 | / unsafe extern "C" fn set_local_attr(
685 | |     mut s: *mut xcm_socket,
686 | |     mut context: *mut libc::c_void,
687 | |     mut value: *const libc::c_void,
688 | |     mut len: size_t,
689 | | ) -> libc::c_int {
    | |________________^

warning: unused variable: `context`
   --> src/xcm_tp.rs:694:9
    |
694 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `addr_to_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:698:12
    |
698 |     return addr_to_attr(xcm_local_addr(s), value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:692:1
    |
692 | / unsafe extern "C" fn get_local_attr(
693 | |     mut s: *mut xcm_socket,
694 | |     mut context: *mut libc::c_void,
695 | |     mut value: *mut libc::c_void,
696 | |     mut capacity: size_t,
697 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_local_addr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:698:25
    |
698 |     return addr_to_attr(xcm_local_addr(s), value, capacity);
    |                         ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:702:9
    |
702 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `addr_to_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:706:12
    |
706 |     return addr_to_attr(xcm_remote_addr(s), value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:700:1
    |
700 | / unsafe extern "C" fn get_remote_attr(
701 | |     mut s: *mut xcm_socket,
702 | |     mut context: *mut libc::c_void,
703 | |     mut value: *mut libc::c_void,
704 | |     mut capacity: size_t,
705 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_remote_addr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:706:25
    |
706 |     return addr_to_attr(xcm_remote_addr(s), value, capacity);
    |                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:710:9
    |
710 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `xcm_tp_set_bool_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:715:5
    |
715 |     xcm_tp_set_bool_attr(value, len, &mut is_blocking);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:708:1
    |
708 | / unsafe extern "C" fn set_blocking_attr(
709 | |     mut s: *mut xcm_socket,
710 | |     mut context: *mut libc::c_void,
711 | |     mut value: *const libc::c_void,
712 | |     mut len: size_t,
713 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `xcm_set_blocking` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:716:8
    |
716 |     if xcm_set_blocking(s, is_blocking) < 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:723:9
    |
723 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: call to unsafe function `xcm_tp_get_bool_attr` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:727:12
    |
727 |     return xcm_tp_get_bool_attr((*s).is_blocking, value, capacity);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:721:1
    |
721 | / unsafe extern "C" fn get_blocking_attr(
722 | |     mut s: *mut xcm_socket,
723 | |     mut context: *mut libc::c_void,
724 | |     mut value: *mut libc::c_void,
725 | |     mut capacity: size_t,
726 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:727:33
    |
727 |     return xcm_tp_get_bool_attr((*s).is_blocking, value, capacity);
    |                                 ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:731:9
    |
731 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:735:8
    |
735 |     if (*s).type_0 as libc::c_uint != xcm_socket_type_conn as libc::c_int as libc::c_uint
    |        ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:729:1
    |
729 | / unsafe extern "C" fn get_max_msg_attr(
730 | |     mut s: *mut xcm_socket,
731 | |     mut context: *mut libc::c_void,
732 | |     mut value: *mut libc::c_void,
733 | |     mut capacity: size_t,
734 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:737:9
    |
737 |         *__errno_location() = 2 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:737:10
    |
737 |         *__errno_location() = 2 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:741:9
    |
741 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:741:10
    |
741 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function is unsafe and requires unsafe block
   --> src/xcm_tp.rs:744:32
    |
744 |       let mut max_msg: int64_t = ((*(*(*s).proto).ops).max_msg)
    |  ________________________________^
745 | |         .expect("non-null function pointer")(s) as int64_t;
    | |_______________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:744:33
    |
744 |     let mut max_msg: int64_t = ((*(*(*s).proto).ops).max_msg)
    |                                 ^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:744:35
    |
744 |     let mut max_msg: int64_t = ((*(*(*s).proto).ops).max_msg)
    |                                   ^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:744:37
    |
744 |     let mut max_msg: int64_t = ((*(*(*s).proto).ops).max_msg)
    |                                     ^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:746:5
    |
746 | /     memcpy(
747 | |         value,
748 | |         &mut max_msg as *mut int64_t as *const libc::c_void,
749 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
750 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:755:9
    |
755 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:760:9
    |
760 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:753:1
    |
753 | / unsafe extern "C" fn get_to_app_bytes_attr(
754 | |     mut s: *mut xcm_socket,
755 | |     mut context: *mut libc::c_void,
756 | |     mut value: *mut libc::c_void,
757 | |     mut capacity: size_t,
758 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:760:10
    |
760 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:763:34
    |
763 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_to_app_bytes);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:764:5
    |
764 | /     memcpy(
765 | |         value,
766 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
767 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
768 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:773:9
    |
773 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:778:9
    |
778 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:771:1
    |
771 | / unsafe extern "C" fn get_from_app_bytes_attr(
772 | |     mut s: *mut xcm_socket,
773 | |     mut context: *mut libc::c_void,
774 | |     mut value: *mut libc::c_void,
775 | |     mut capacity: size_t,
776 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:778:10
    |
778 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:781:34
    |
781 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_from_app_bytes);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:782:5
    |
782 | /     memcpy(
783 | |         value,
784 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
785 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
786 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:791:9
    |
791 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:796:9
    |
796 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:789:1
    |
789 | / unsafe extern "C" fn get_to_lower_bytes_attr(
790 | |     mut s: *mut xcm_socket,
791 | |     mut context: *mut libc::c_void,
792 | |     mut value: *mut libc::c_void,
793 | |     mut capacity: size_t,
794 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:796:10
    |
796 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:799:34
    |
799 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_to_lower_bytes);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:800:5
    |
800 | /     memcpy(
801 | |         value,
802 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
803 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
804 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:809:9
    |
809 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:814:9
    |
814 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:807:1
    |
807 | / unsafe extern "C" fn get_from_lower_bytes_attr(
808 | |     mut s: *mut xcm_socket,
809 | |     mut context: *mut libc::c_void,
810 | |     mut value: *mut libc::c_void,
811 | |     mut capacity: size_t,
812 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:814:10
    |
814 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:817:34
    |
817 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_from_lower_bytes);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:818:5
    |
818 | /     memcpy(
819 | |         value,
820 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
821 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
822 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:827:9
    |
827 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:832:9
    |
832 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:825:1
    |
825 | / unsafe extern "C" fn get_to_app_msgs_attr(
826 | |     mut s: *mut xcm_socket,
827 | |     mut context: *mut libc::c_void,
828 | |     mut value: *mut libc::c_void,
829 | |     mut capacity: size_t,
830 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:832:10
    |
832 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:835:34
    |
835 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_to_app_msgs);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:836:5
    |
836 | /     memcpy(
837 | |         value,
838 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
839 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
840 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:845:9
    |
845 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:850:9
    |
850 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:843:1
    |
843 | / unsafe extern "C" fn get_from_app_msgs_attr(
844 | |     mut s: *mut xcm_socket,
845 | |     mut context: *mut libc::c_void,
846 | |     mut value: *mut libc::c_void,
847 | |     mut capacity: size_t,
848 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:850:10
    |
850 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:853:34
    |
853 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_from_app_msgs);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:854:5
    |
854 | /     memcpy(
855 | |         value,
856 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
857 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
858 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:863:9
    |
863 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:868:9
    |
868 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:861:1
    |
861 | / unsafe extern "C" fn get_to_lower_msgs_attr(
862 | |     mut s: *mut xcm_socket,
863 | |     mut context: *mut libc::c_void,
864 | |     mut value: *mut libc::c_void,
865 | |     mut capacity: size_t,
866 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:868:10
    |
868 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:871:34
    |
871 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_to_lower_msgs);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:872:5
    |
872 | /     memcpy(
873 | |         value,
874 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
875 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
876 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `context`
   --> src/xcm_tp.rs:881:9
    |
881 |     mut context: *mut libc::c_void,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/xcm_tp.rs:886:9
    |
886 |         *__errno_location() = 75 as libc::c_int;
    |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:879:1
    |
879 | / unsafe extern "C" fn get_from_lower_msgs_attr(
880 | |     mut s: *mut xcm_socket,
881 | |     mut context: *mut libc::c_void,
882 | |     mut value: *mut libc::c_void,
883 | |     mut capacity: size_t,
884 | | ) -> libc::c_int {
    | |________________^

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:886:10
    |
886 |         *__errno_location() = 75 as libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_socket_get_cnt` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:889:34
    |
889 |     let mut cnt_value: int64_t = xcm_tp_socket_get_cnt(s, xcm_tp_cnt_from_lower_msgs);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `memcpy` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:890:5
    |
890 | /     memcpy(
891 | |         value,
892 | |         &mut cnt_value as *mut int64_t as *const libc::c_void,
893 | |         ::core::mem::size_of::<int64_t>() as libc::c_ulong,
894 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:898:5
    |
898 | /     attr_tree_add_value_node(
899 | |         tree,
900 | |         b"xcm.blocking\0" as *const u8 as *const libc::c_char,
901 | |         s,
...   |
921 | |         ),
922 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/xcm_tp.rs:897:1
    |
897 | unsafe extern "C" fn populate_common(mut s: *mut xcm_socket, mut tree: *mut attr_tree) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:923:5
    |
923 | /     attr_tree_add_value_node(
924 | |         tree,
925 | |         b"xcm.type\0" as *const u8 as *const libc::c_char,
926 | |         s,
...   |
938 | |         ),
939 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:940:5
    |
940 | /     attr_tree_add_value_node(
941 | |         tree,
942 | |         b"xcm.transport\0" as *const u8 as *const libc::c_char,
943 | |         s,
...   |
955 | |         ),
956 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
   --> src/xcm_tp.rs:957:5
    |
957 | /     attr_tree_add_value_node(
958 | |         tree,
959 | |         b"xcm.service\0" as *const u8 as *const libc::c_char,
960 | |         s,
...   |
980 | |         ),
981 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:984:5
     |
984  | /     attr_tree_add_value_node(
985  | |         tree,
986  | |         b"xcm.to_app_msgs\0" as *const u8 as *const libc::c_char,
987  | |         s,
...    |
999  | |         ),
1000 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:983:1
     |
983  | unsafe extern "C" fn populate_msg_cnt(mut s: *mut xcm_socket, mut tree: *mut attr_tree) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1001:5
     |
1001 | /     attr_tree_add_value_node(
1002 | |         tree,
1003 | |         b"xcm.to_app_bytes\0" as *const u8 as *const libc::c_char,
1004 | |         s,
...    |
1016 | |         ),
1017 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1018:5
     |
1018 | /     attr_tree_add_value_node(
1019 | |         tree,
1020 | |         b"xcm.from_app_msgs\0" as *const u8 as *const libc::c_char,
1021 | |         s,
...    |
1033 | |         ),
1034 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1035:5
     |
1035 | /     attr_tree_add_value_node(
1036 | |         tree,
1037 | |         b"xcm.from_app_bytes\0" as *const u8 as *const libc::c_char,
1038 | |         s,
...    |
1050 | |         ),
1051 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1052:5
     |
1052 | /     attr_tree_add_value_node(
1053 | |         tree,
1054 | |         b"xcm.to_lower_msgs\0" as *const u8 as *const libc::c_char,
1055 | |         s,
...    |
1067 | |         ),
1068 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1069:5
     |
1069 | /     attr_tree_add_value_node(
1070 | |         tree,
1071 | |         b"xcm.to_lower_bytes\0" as *const u8 as *const libc::c_char,
1072 | |         s,
...    |
1084 | |         ),
1085 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1086:5
     |
1086 | /     attr_tree_add_value_node(
1087 | |         tree,
1088 | |         b"xcm.from_lower_msgs\0" as *const u8 as *const libc::c_char,
1089 | |         s,
...    |
1101 | |         ),
1102 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1103:5
     |
1103 | /     attr_tree_add_value_node(
1104 | |         tree,
1105 | |         b"xcm.from_lower_bytes\0" as *const u8 as *const libc::c_char,
1106 | |         s,
...    |
1118 | |         ),
1119 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1125:5
     |
1125 | /     attr_tree_add_value_node(
1126 | |         tree,
1127 | |         b"xcm.to_app_bytes\0" as *const u8 as *const libc::c_char,
1128 | |         s,
...    |
1140 | |         ),
1141 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1121:1
     |
1121 | / unsafe extern "C" fn populate_bytestream_cnt(
1122 | |     mut s: *mut xcm_socket,
1123 | |     mut tree: *mut attr_tree,
1124 | | ) {
     | |_^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1142:5
     |
1142 | /     attr_tree_add_value_node(
1143 | |         tree,
1144 | |         b"xcm.from_app_bytes\0" as *const u8 as *const libc::c_char,
1145 | |         s,
...    |
1157 | |         ),
1158 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1159:5
     |
1159 | /     attr_tree_add_value_node(
1160 | |         tree,
1161 | |         b"xcm.to_lower_bytes\0" as *const u8 as *const libc::c_char,
1162 | |         s,
...    |
1174 | |         ),
1175 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1176:5
     |
1176 | /     attr_tree_add_value_node(
1177 | |         tree,
1178 | |         b"xcm.from_lower_bytes\0" as *const u8 as *const libc::c_char,
1179 | |         s,
...    |
1191 | |         ),
1192 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_common` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1198:5
     |
1198 |     populate_common(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1194:1
     |
1194 | / unsafe extern "C" fn populate_common_conn(
1195 | |     mut s: *mut xcm_socket,
1196 | |     mut tree: *mut attr_tree,
1197 | | ) {
     | |_^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1199:5
     |
1199 | /     attr_tree_add_value_node(
1200 | |         tree,
1201 | |         b"xcm.local_addr\0" as *const u8 as *const libc::c_char,
1202 | |         s,
...    |
1222 | |         ),
1223 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1224:5
     |
1224 | /     attr_tree_add_value_node(
1225 | |         tree,
1226 | |         b"xcm.remote_addr\0" as *const u8 as *const libc::c_char,
1227 | |         s,
...    |
1239 | |         ),
1240 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_common_conn` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1246:5
     |
1246 |     populate_common_conn(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1242:1
     |
1242 | / unsafe extern "C" fn populate_msg_conn(
1243 | |     mut s: *mut xcm_socket,
1244 | |     mut tree: *mut attr_tree,
1245 | | ) {
     | |_^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1247:5
     |
1247 | /     attr_tree_add_value_node(
1248 | |         tree,
1249 | |         b"xcm.max_msg_size\0" as *const u8 as *const libc::c_char,
1250 | |         s,
...    |
1262 | |         ),
1263 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_msg_cnt` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1264:5
     |
1264 |     populate_msg_cnt(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_common_conn` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1270:5
     |
1270 |     populate_common_conn(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1266:1
     |
1266 | / unsafe extern "C" fn populate_bytestream_conn(
1267 | |     mut s: *mut xcm_socket,
1268 | |     mut tree: *mut attr_tree,
1269 | | ) {
     | |_^

warning[E0133]: call to unsafe function `populate_bytestream_cnt` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1271:5
     |
1271 |     populate_bytestream_cnt(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_common` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1274:5
     |
1274 |     populate_common(s, tree);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1273:1
     |
1273 | unsafe extern "C" fn populate_server(mut s: *mut xcm_socket, mut tree: *mut attr_tree) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `attr_tree_add_value_node` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1275:5
     |
1275 | /     attr_tree_add_value_node(
1276 | |         tree,
1277 | |         b"xcm.local_addr\0" as *const u8 as *const libc::c_char,
1278 | |         s,
...    |
1290 | |         ),
1291 | |     );
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1298:11
     |
1298 |     match (*s).type_0 as libc::c_uint {
     |           ^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1294:1
     |
1294 | / pub unsafe extern "C" fn xcm_tp_common_attr_populate(
1295 | |     mut s: *mut xcm_socket,
1296 | |     mut tree: *mut attr_tree,
1297 | | ) {
     | |_^

warning[E0133]: call to unsafe function `xcm_tp_socket_is_bytestream` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1300:16
     |
1300 |             if xcm_tp_socket_is_bytestream(s) {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_bytestream_conn` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1301:17
     |
1301 |                 populate_bytestream_conn(s, tree);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_msg_conn` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1303:17
     |
1303 |                 populate_msg_conn(s, tree);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `populate_server` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1307:13
     |
1307 |             populate_server(s, tree);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1311:17
     |
1311 |                 log_console_conf(1 as libc::c_int != 0);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1312:20
     |
1312 |                 if log_is_enabled(log_type_error) {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1313:21
     |
1313 | /                     __log_event(
1314 | |                         log_type_error,
1315 | |                         b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0"
1316 | |                             as *const u8 as *const libc::c_char,
...    |
1326 | |                         b"0\0" as *const u8 as *const libc::c_char,
1327 | |                     );
     | |_____________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1318:27
     |
1318 |                           (*::core::mem::transmute::<
     |  ___________________________^
1319 | |                             &[u8; 28],
1320 | |                             &[libc::c_char; 28],
1321 | |                         >(b"xcm_tp_common_attr_populate\0"))
     | |___________________________________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1329:17
     |
1329 |                 abort();
     |                 ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1346:27
     |
1346 |     while (i as size_t) < num_protos {
     |                           ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1341:1
     |
1341 | / pub unsafe extern "C" fn xcm_tp_proto_by_name(
1342 | |     mut proto_name: *const libc::c_char,
1343 | | ) -> *mut xcm_tp_proto {
     | |______________________^

warning[E0133]: call to unsafe function `strcmp` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1347:12
     |
1347 |         if strcmp((protos[i as usize].name).as_mut_ptr(), proto_name) == 0 as libc::c_int
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1347:20
     |
1347 |         if strcmp((protos[i as usize].name).as_mut_ptr(), proto_name) == 0 as libc::c_int
     |                    ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1349:25
     |
1349 |             return &mut *protos.as_mut_ptr().offset(i as isize) as *mut xcm_tp_proto;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::offset` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1349:26
     |
1349 |             return &mut *protos.as_mut_ptr().offset(i as isize) as *mut xcm_tp_proto;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1349:26
     |
1349 |             return &mut *protos.as_mut_ptr().offset(i as isize) as *mut xcm_tp_proto;
     |                          ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `xcm_addr_parse_proto` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1361:8
     |
1361 |       if xcm_addr_parse_proto(
     |  ________^
1362 | |         addr,
1363 | |         proto_s.as_mut_ptr(),
1364 | |         ::core::mem::size_of::<[libc::c_char; 33]>() as libc::c_ulong,
1365 | |     ) < 0 as libc::c_int
     | |_____^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1357:1
     |
1357 | / pub unsafe extern "C" fn xcm_tp_proto_by_addr(
1358 | |     mut addr: *const libc::c_char,
1359 | | ) -> *mut xcm_tp_proto {
     | |______________________^

warning[E0133]: call to unsafe function `xcm_tp_proto_by_name` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1369:40
     |
1369 |     let mut proto: *mut xcm_tp_proto = xcm_tp_proto_by_name(proto_s.as_mut_ptr());
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1371:9
     |
1371 |         *__errno_location() = 92 as libc::c_int;
     |         ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1371:10
     |
1371 |         *__errno_location() = 92 as libc::c_int;
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1381:10
     |
1381 |     if !(num_protos < 8 as libc::c_int as size_t) {
     |          ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
    --> src/xcm_tp.rs:1377:1
     |
1377 | / pub unsafe extern "C" fn xcm_tp_register(
1378 | |     mut proto_name: *const libc::c_char,
1379 | |     mut ops: *const xcm_tp_ops,
1380 | | ) {
     | |_^

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1382:9
     |
1382 |         log_console_conf(1 as libc::c_int != 0);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1383:12
     |
1383 |         if log_is_enabled(log_type_error) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1384:13
     |
1384 | /             __log_event(
1385 | |                 log_type_error,
1386 | |                 b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0" as *const u8
1387 | |                     as *const libc::c_char,
...    |
1396 | |                 b"num_protos < (8)\0" as *const u8 as *const libc::c_char,
1397 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1389:19
     |
1389 |                   (*::core::mem::transmute::<
     |  ___________________^
1390 | |                     &[u8; 16],
1391 | |                     &[libc::c_char; 16],
1392 | |                 >(b"xcm_tp_register\0"))
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1399:9
     |
1399 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1401:10
     |
1401 |     if !(strlen(proto_name) <= 32 as libc::c_int as libc::c_ulong) {
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1402:9
     |
1402 |         log_console_conf(1 as libc::c_int != 0);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1403:12
     |
1403 |         if log_is_enabled(log_type_error) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1404:13
     |
1404 | /             __log_event(
1405 | |                 log_type_error,
1406 | |                 b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0" as *const u8
1407 | |                     as *const libc::c_char,
...    |
1416 | |                 b"strlen(proto_name) <= (32)\0" as *const u8 as *const libc::c_char,
1417 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1409:19
     |
1409 |                   (*::core::mem::transmute::<
     |  ___________________^
1410 | |                     &[u8; 16],
1411 | |                     &[libc::c_char; 16],
1412 | |                 >(b"xcm_tp_register\0"))
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1419:9
     |
1419 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1421:10
     |
1421 |     if !(strlen(proto_name) <= 32 as libc::c_int as libc::c_ulong) {
     |          ^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1422:9
     |
1422 |         log_console_conf(1 as libc::c_int != 0);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1423:12
     |
1423 |         if log_is_enabled(log_type_error) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1424:13
     |
1424 | /             __log_event(
1425 | |                 log_type_error,
1426 | |                 b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0" as *const u8
1427 | |                     as *const libc::c_char,
...    |
1436 | |                 b"strlen(proto_name) <= (32)\0" as *const u8 as *const libc::c_char,
1437 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1429:19
     |
1429 |                   (*::core::mem::transmute::<
     |  ___________________^
1430 | |                     &[u8; 16],
1431 | |                     &[libc::c_char; 16],
1432 | |                 >(b"xcm_tp_register\0"))
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1439:9
     |
1439 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `xcm_tp_proto_by_name` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1441:9
     |
1441 |     if !(xcm_tp_proto_by_name(proto_name)).is_null() {
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1442:9
     |
1442 |         log_console_conf(1 as libc::c_int != 0);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1443:12
     |
1443 |         if log_is_enabled(log_type_error) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1444:13
     |
1444 | /             __log_event(
1445 | |                 log_type_error,
1446 | |                 b"/home/ehhjmou/xcm-translation/libxcm/tp/common/xcm_tp.c\0" as *const u8
1447 | |                     as *const libc::c_char,
...    |
1457 | |                     as *const libc::c_char,
1458 | |             );
     | |_____________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1449:19
     |
1449 |                   (*::core::mem::transmute::<
     |  ___________________^
1450 | |                     &[u8; 16],
1451 | |                     &[libc::c_char; 16],
1452 | |                 >(b"xcm_tp_register\0"))
     | |_______________________________________^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1460:9
     |
1460 |         abort();
     |         ^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strcpy` is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1462:5
     |
1462 |     strcpy((protos[num_protos as usize].name).as_mut_ptr(), proto_name);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1462:13
     |
1462 |     strcpy((protos[num_protos as usize].name).as_mut_ptr(), proto_name);
     |             ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1462:20
     |
1462 |     strcpy((protos[num_protos as usize].name).as_mut_ptr(), proto_name);
     |                    ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1463:5
     |
1463 |     protos[num_protos as usize].ops = ops;
     |     ^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1463:12
     |
1463 |     protos[num_protos as usize].ops = ops;
     |            ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1464:5
     |
1464 |     num_protos = num_protos.wrapping_add(1);
     |     ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1464:18
     |
1464 |     num_protos = num_protos.wrapping_add(1);
     |                  ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
    --> src/xcm_tp.rs:1465:5
     |
1465 |     num_protos;
     |     ^^^^^^^^^^ use of mutable static
     |
     = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
     = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning: path statement with no effect
    --> src/xcm_tp.rs:1352:9
     |
1352 |         i;
     |         ^^
     |
     = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
    --> src/xcm_tp.rs:1465:5
     |
1465 |     num_protos;
     |     ^^^^^^^^^^^

For more information about this error, try `rustc --explain E0133`.
warning: `rs-xcm_tp` (lib) generated 346 warnings (run `cargo fix --lib -p rs-xcm_tp` to apply 62 suggestions)
    Finished `release` profile [optimized] target(s) in 0.05s
warning[E0133]: call to unsafe function `strlen` is unsafe and requires unsafe block
  --> src/xcm_dns.rs:85:8
   |
85 |     if strlen(name) > 253 as libc::c_int as libc::c_ulong {
   |        ^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/xcm_dns.rs:84:1
   |
84 | pub unsafe extern "C" fn xcm_dns_is_valid_name(mut name: *const libc::c_char) -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `regcomp` is unsafe and requires unsafe block
   --> src/xcm_dns.rs:99:31
    |
99  |       let mut rc: libc::c_int = regcomp(
    |  _______________________________^
100 | |         &mut re,
101 | |         b"^[a-z0-9\\-]+(\\.[a-z0-9\\-]+\\.?)*$\0" as *const u8 as *const libc::c_char,
102 | |         (1 as libc::c_int) << 1 as libc::c_int | 1 as libc::c_int,
103 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_mem_exhausted` is unsafe and requires unsafe block
   --> src/xcm_dns.rs:105:9
    |
105 |         ut_mem_exhausted();
    |         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `regexec` is unsafe and requires unsafe block
   --> src/xcm_dns.rs:109:10
    |
109 |     rc = regexec(&mut re, name, 1 as libc::c_int as size_t, &mut m, 0 as libc::c_int);
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_fatal` is unsafe and requires unsafe block
   --> src/xcm_dns.rs:115:9
    |
115 |         ut_fatal();
    |         ^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `regfree` is unsafe and requires unsafe block
   --> src/xcm_dns.rs:117:5
    |
117 |     regfree(&mut re);
    |     ^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

For more information about this error, try `rustc --explain E0133`.
warning: `rs-xcm-dns` (lib) generated 6 warnings (run `cargo fix --lib -p rs-xcm-dns` to apply 1 suggestion)
    Finished `release` profile [optimized] target(s) in 0.02s
