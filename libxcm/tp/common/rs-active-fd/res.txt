   Compiling rs-active-fd v0.1.0 (/home/lysarina/skool/exjobb/xcm-translation/libxcm/tp/common/rs-active-fd)
warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:209:17
    |
209 |     active_fd = active_fds.lh_first;
    |                 ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/active_fd.rs:207:1
    |
207 | unsafe extern "C" fn fd_retrieve() -> *mut active_fd {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:211:12
    |
211 |         if (*active_fd).cnt < 100 as libc::c_int {
    |            ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:212:13
    |
212 |             (*active_fd).cnt += 1;
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:213:13
    |
213 |             (*active_fd).cnt;
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:216:21
    |
216 |         active_fd = (*active_fd).elem.le_next;
    |                     ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `eventfd` is unsafe and requires unsafe block
   --> src/active_fd.rs:221:31
    |
221 |       let mut fd: libc::c_int = eventfd(
    |  _______________________________^
222 | |         1 as libc::c_int as libc::c_uint,
223 | |         EFD_NONBLOCK as libc::c_int,
224 | |     );
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/active_fd.rs:220:1
    |
220 | unsafe extern "C" fn fd_create() -> *mut active_fd {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/active_fd.rs:226:12
    |
226 |         if log_is_enabled(log_type_debug) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/active_fd.rs:227:13
    |
227 | /             __log_event(
228 | |                 log_type_debug,
229 | |                 b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/tp/common/active_fd.c\0"
230 | |                     as *const u8 as *const libc::c_char,
...   |
241 | |                 strerror(*__errno_location()),
242 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/active_fd.rs:232:19
    |
232 |                   (*::core::mem::transmute::<
    |  ___________________^
233 | |                     &[u8; 10],
234 | |                     &[libc::c_char; 10],
235 | |                 >(b"fd_create\0"))
    | |_________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:240:17
    |
240 |                 *__errno_location(),
    |                 ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/active_fd.rs:240:18
    |
240 |                 *__errno_location(),
    |                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `strerror` is unsafe and requires unsafe block
   --> src/active_fd.rs:241:17
    |
241 |                 strerror(*__errno_location()),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:241:26
    |
241 |                 strerror(*__errno_location()),
    |                          ^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `__errno_location` is unsafe and requires unsafe block
   --> src/active_fd.rs:241:27
    |
241 |                 strerror(*__errno_location()),
    |                           ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_malloc` is unsafe and requires unsafe block
   --> src/active_fd.rs:246:41
    |
246 |       let mut active_fd: *mut active_fd = ut_malloc(
    |  _________________________________________^
247 | |         ::core::mem::size_of::<active_fd>() as libc::c_ulong,
248 | |     ) as *mut active_fd;
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:249:5
    |
249 |     *active_fd = {
    |     ^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:260:5
    |
260 |     (*active_fd).elem.le_next = active_fds.lh_first;
    |     ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:260:33
    |
260 |     (*active_fd).elem.le_next = active_fds.lh_first;
    |                                 ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:261:10
    |
261 |     if !((*active_fd).elem.le_next).is_null() {
    |          ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:262:9
    |
262 |         (*active_fds.lh_first).elem.le_prev = &mut (*active_fd).elem.le_next;
    |         ^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:262:11
    |
262 |         (*active_fds.lh_first).elem.le_prev = &mut (*active_fd).elem.le_next;
    |           ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:262:52
    |
262 |         (*active_fds.lh_first).elem.le_prev = &mut (*active_fd).elem.le_next;
    |                                                    ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:264:5
    |
264 |     active_fds.lh_first = active_fd;
    |     ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:265:5
    |
265 |     (*active_fd).elem.le_prev = &mut active_fds.lh_first;
    |     ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:265:38
    |
265 |     (*active_fd).elem.le_prev = &mut active_fds.lh_first;
    |                                      ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/active_fd.rs:266:8
    |
266 |     if log_is_enabled(log_type_debug) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/active_fd.rs:267:9
    |
267 | /         __log_event(
268 | |             log_type_debug,
269 | |             b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/tp/common/active_fd.c\0"
270 | |                 as *const u8 as *const libc::c_char,
...   |
277 | |             (*active_fd).fd,
278 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/active_fd.rs:272:15
    |
272 |             (*::core::mem::transmute::<&[u8; 10], &[libc::c_char; 10]>(b"fd_create\0"))
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:277:13
    |
277 |             (*active_fd).fd,
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_mutex_lock` is unsafe and requires unsafe block
   --> src/active_fd.rs:284:5
    |
284 |     ut_mutex_lock(&mut active_fd_lock);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/active_fd.rs:283:1
    |
283 | pub unsafe extern "C" fn active_fd_get() -> libc::c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:284:24
    |
284 |     ut_mutex_lock(&mut active_fd_lock);
    |                        ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: call to unsafe function `fd_retrieve` is unsafe and requires unsafe block
   --> src/active_fd.rs:285:41
    |
285 |     let mut active_fd: *mut active_fd = fd_retrieve();
    |                                         ^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `fd_create` is unsafe and requires unsafe block
   --> src/active_fd.rs:287:21
    |
287 |         active_fd = fd_create();
    |                     ^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_mutex_unlock` is unsafe and requires unsafe block
   --> src/active_fd.rs:289:5
    |
289 |     ut_mutex_unlock(&mut active_fd_lock);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:289:26
    |
289 |     ut_mutex_unlock(&mut active_fd_lock);
    |                          ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:290:38
    |
290 |     return if !active_fd.is_null() { (*active_fd).fd } else { -(1 as libc::c_int) };
    |                                      ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_mutex_lock` is unsafe and requires unsafe block
   --> src/active_fd.rs:295:5
    |
295 |     ut_mutex_lock(&mut active_fd_lock);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src/active_fd.rs:293:1
    |
293 | pub unsafe extern "C" fn active_fd_put(mut fd: libc::c_int) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:295:24
    |
295 |     ut_mutex_lock(&mut active_fd_lock);
    |                        ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:297:17
    |
297 |     active_fd = active_fds.lh_first;
    |                 ^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:303:12
    |
303 |         if (*active_fd).fd == fd {
    |            ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:304:13
    |
304 |             (*active_fd).cnt -= 1;
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:305:13
    |
305 |             (*active_fd).cnt;
    |             ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:306:16
    |
306 |             if (*active_fd).cnt == 0 as libc::c_int {
    |                ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:307:22
    |
307 |                 if !((*active_fd).elem.le_next).is_null() {
    |                      ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:308:21
    |
308 |                     (*(*active_fd).elem.le_next)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:308:23
    |
308 |                     (*(*active_fd).elem.le_next)
    |                       ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:310:36
    |
310 |                         .le_prev = (*active_fd).elem.le_prev;
    |                                    ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:312:17
    |
312 |                 *(*active_fd).elem.le_prev = (*active_fd).elem.le_next;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:312:18
    |
312 |                 *(*active_fd).elem.le_prev = (*active_fd).elem.le_next;
    |                  ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:312:46
    |
312 |                 *(*active_fd).elem.le_prev = (*active_fd).elem.le_next;
    |                                              ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_close` is unsafe and requires unsafe block
   --> src/active_fd.rs:313:17
    |
313 |                 ut_close((*active_fd).fd);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:313:26
    |
313 |                 ut_close((*active_fd).fd);
    |                          ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/active_fd.rs:314:20
    |
314 |                 if log_is_enabled(log_type_debug) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/active_fd.rs:315:21
    |
315 | /                     __log_event(
316 | |                         log_type_debug,
317 | |                         b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/tp/common/active_fd.c\0"
318 | |                             as *const u8 as *const libc::c_char,
...   |
329 | |                         (*active_fd).fd,
330 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/active_fd.rs:320:27
    |
320 |                           (*::core::mem::transmute::<
    |  ___________________________^
321 | |                             &[u8; 14],
322 | |                             &[libc::c_char; 14],
323 | |                         >(b"active_fd_put\0"))
    | |_____________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:329:25
    |
329 |                         (*active_fd).fd,
    |                         ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `ut_free` is unsafe and requires unsafe block
   --> src/active_fd.rs:332:17
    |
332 |                 ut_free(active_fd as *mut libc::c_void);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src/active_fd.rs:337:25
    |
337 |             active_fd = (*active_fd).elem.le_next;
    |                         ^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `log_console_conf` is unsafe and requires unsafe block
   --> src/active_fd.rs:343:17
    |
343 |                 log_console_conf(1 as libc::c_int != 0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `log_is_enabled` is unsafe and requires unsafe block
   --> src/active_fd.rs:344:20
    |
344 |                 if log_is_enabled(log_type_error) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `__log_event` is unsafe and requires unsafe block
   --> src/active_fd.rs:345:21
    |
345 | /                     __log_event(
346 | |                         log_type_error,
347 | |                         b"/home/lysarina/skool/exjobb/xcm-translation/libxcm/tp/common/active_fd.c\0"
348 | |                             as *const u8 as *const libc::c_char,
...   |
358 | |                         b"0\0" as *const u8 as *const libc::c_char,
359 | |                     );
    | |_____________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::intrinsics::transmute` is unsafe and requires unsafe block
   --> src/active_fd.rs:350:27
    |
350 |                           (*::core::mem::transmute::<
    |  ___________________________^
351 | |                             &[u8; 14],
352 | |                             &[libc::c_char; 14],
353 | |                         >(b"active_fd_put\0"))
    | |_____________________________________________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `abort` is unsafe and requires unsafe block
   --> src/active_fd.rs:361:17
    |
361 |                 abort();
    |                 ^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `ut_mutex_unlock` is unsafe and requires unsafe block
   --> src/active_fd.rs:366:5
    |
366 |     ut_mutex_unlock(&mut active_fd_lock);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: use of mutable static is unsafe and requires unsafe block
   --> src/active_fd.rs:366:26
    |
366 |     ut_mutex_unlock(&mut active_fd_lock);
    |                          ^^^^^^^^^^^^^^ use of mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior

error: creating a mutable reference to mutable static is discouraged
   --> src/active_fd.rs:265:33
    |
265 |     (*active_fd).elem.le_prev = &mut active_fds.lh_first;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
    = note: `#[deny(static_mut_refs)]` on by default
help: use `&raw mut` instead to create a raw pointer
    |
265 |     (*active_fd).elem.le_prev = &raw mut active_fds.lh_first;
    |                                  +++

error: creating a mutable reference to mutable static is discouraged
   --> src/active_fd.rs:284:19
    |
284 |     ut_mutex_lock(&mut active_fd_lock);
    |                   ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
help: use `&raw mut` instead to create a raw pointer
    |
284 |     ut_mutex_lock(&raw mut active_fd_lock);
    |                    +++

error: creating a mutable reference to mutable static is discouraged
   --> src/active_fd.rs:289:21
    |
289 |     ut_mutex_unlock(&mut active_fd_lock);
    |                     ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
help: use `&raw mut` instead to create a raw pointer
    |
289 |     ut_mutex_unlock(&raw mut active_fd_lock);
    |                      +++

error: creating a mutable reference to mutable static is discouraged
   --> src/active_fd.rs:295:19
    |
295 |     ut_mutex_lock(&mut active_fd_lock);
    |                   ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
help: use `&raw mut` instead to create a raw pointer
    |
295 |     ut_mutex_lock(&raw mut active_fd_lock);
    |                    +++

error: creating a mutable reference to mutable static is discouraged
   --> src/active_fd.rs:366:21
    |
366 |     ut_mutex_unlock(&mut active_fd_lock);
    |                     ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives
help: use `&raw mut` instead to create a raw pointer
    |
366 |     ut_mutex_unlock(&raw mut active_fd_lock);
    |                      +++

For more information about this error, try `rustc --explain E0133`.
warning: `rs-active-fd` (lib) generated 65 warnings
error: could not compile `rs-active-fd` (lib) due to 5 previous errors; 65 warnings emitted
